Terminals unused in grammar

    tCONST
    tERROR


State 29 conflicts: 1 shift/reduce
State 106 conflicts: 2 shift/reduce


Grammar

    0 $accept: program $end

    1 program: ε
    2        | action-start main_function
    3        | action-start function_list main_function

    4 action-start: ε

    5 function_list: function
    6              | function_list function

    7 $@1: ε

    8 function: function_type tID action-inc $@1 tLPAR parameter_list tRPAR tLBRACE body tRBRACE

    9 action-inc: ε

   10 action-dec: ε

   11 $@2: ε

   12 main_function: function_type tMAIN action-inc $@2 tLPAR parameter_list tRPAR tLBRACE body tRBRACE action-dec

   13 function_type: tVOID
   14              | tINT

   15 parameter_list: ε
   16               | tVOID
   17               | parameter
   18               | parameter_list tCOMMA parameter

   19 parameter: variable_type identifiers_list

   20 variable_type: tINT

   21 functionCall: tID tLPAR action-call0 action-call1 argument_list tRPAR

   22 action-call0: ε

   23 action-call1: ε

   24 argument_list: ε
   25              | argument_list tCOMMA equality_expression
   26              | equality_expression

   27 body: ε
   28     | declaration_list
   29     | instruction_list
   30     | declaration_list instruction_list
   31     | return

   32 return: tRETURN equality_expression tSEMI

   33 instruction_list: instruction
   34                 | instruction_list instruction

   35 declaration_list: declaration
   36                 | declaration_list declaration

   37 declaration: variable_type identifiers_list tSEMI

   38 identifiers_list: tID
   39                 | tID tASSIGN equality_expression
   40                 | identifiers_list tCOMMA tID
   41                 | identifiers_list tCOMMA tID tASSIGN equality_expression

   42 instruction: assignment_list
   43            | ifblock
   44            | whileblock
   45            | printblock

   46 assignment_list: tID tASSIGN equality_expression tSEMI
   47                | tID tASSIGN equality_expression tCOMMA assignment_list

   48 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex
   49        | tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex
   50        | tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE ifblock

   51 action-if: ε

   52 action-else: ε

   53 action-getIndex: ε

   54 whileblock: tWHILE tLPAR action-condition condition tRPAR action-while tLBRACE body tRBRACE

   55 action-condition: ε

   56 action-while: ε

   57 printblock: tPRINT tLPAR condition tRPAR tSEMI

   58 condition: equality_expression
   59          | condition tAND condition
   60          | condition tOR condition
   61          | tNOT condition

   62 equality_expression: compare
   63                    | equality_expression tEQ compare
   64                    | equality_expression tNE compare

   65 compare: add_sub
   66        | compare tLT add_sub
   67        | compare tGT add_sub
   68        | compare tLE add_sub
   69        | compare tGE add_sub

   70 add_sub: div_mul
   71        | add_sub tADD div_mul
   72        | add_sub tSUB div_mul

   73 div_mul: single_value
   74        | div_mul tMUL single_value
   75        | div_mul tDIV single_value

   76 single_value: functionCall
   77             | tID
   78             | tNB


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    tADD (258) 71
    tSUB (259) 72
    tMUL (260) 74
    tDIV (261) 75
    tLT (262) 66
    tGT (263) 67
    tNE (264) 64
    tEQ (265) 63
    tGE (266) 69
    tLE (267) 68
    tASSIGN (268) 39 41 46 47
    tAND (269) 59
    tOR (270) 60
    tNOT (271) 61
    tLBRACE (272) 8 12 48 49 50 54
    tRBRACE (273) 8 12 48 49 50 54
    tLPAR (274) 8 12 21 48 49 50 54 57
    tRPAR (275) 8 12 21 48 49 50 54 57
    tSEMI (276) 32 37 46 57
    tCOMMA (277) 18 25 40 41 47
    tIF (278) 48 49 50
    tELSE (279) 49 50
    tWHILE (280) 54
    tPRINT (281) 57
    tRETURN (282) 32
    tINT (283) 14 20
    tVOID (284) 13 16
    tMAIN (285) 12
    tCONST (286)
    tERROR (287)
    tNB <nb> (288) 78
    tID <var> (289) 8 21 38 39 40 41 46 47 77


Nonterminals, with rules where they appear

    $accept (35)
        on left: 0
    program (36)
        on left: 1 2 3
        on right: 0
    action-start (37)
        on left: 4
        on right: 2 3
    function_list (38)
        on left: 5 6
        on right: 3 6
    function (39)
        on left: 8
        on right: 5 6
    $@1 (40)
        on left: 7
        on right: 8
    action-inc (41)
        on left: 9
        on right: 8 12
    action-dec (42)
        on left: 10
        on right: 12
    main_function (43)
        on left: 12
        on right: 2 3
    $@2 (44)
        on left: 11
        on right: 12
    function_type (45)
        on left: 13 14
        on right: 8 12
    parameter_list (46)
        on left: 15 16 17 18
        on right: 8 12 18
    parameter (47)
        on left: 19
        on right: 17 18
    variable_type (48)
        on left: 20
        on right: 19 37
    functionCall <nb> (49)
        on left: 21
        on right: 76
    action-call0 <nb> (50)
        on left: 22
        on right: 21
    action-call1 <nb> (51)
        on left: 23
        on right: 21
    argument_list (52)
        on left: 24 25 26
        on right: 21 25
    body (53)
        on left: 27 28 29 30 31
        on right: 8 12 48 49 50 54
    return (54)
        on left: 32
        on right: 31
    instruction_list (55)
        on left: 33 34
        on right: 29 30 34
    declaration_list (56)
        on left: 35 36
        on right: 28 30 36
    declaration (57)
        on left: 37
        on right: 35 36
    identifiers_list (58)
        on left: 38 39 40 41
        on right: 19 37 40 41
    instruction (59)
        on left: 42 43 44 45
        on right: 33 34
    assignment_list (60)
        on left: 46 47
        on right: 42 47
    ifblock (61)
        on left: 48 49 50
        on right: 43 50
    action-if <nb> (62)
        on left: 51
        on right: 48 49 50
    action-else <nb> (63)
        on left: 52
        on right: 49
    action-getIndex <nb> (64)
        on left: 53
        on right: 48 49 50
    whileblock (65)
        on left: 54
        on right: 44
    action-condition <nb> (66)
        on left: 55
        on right: 54
    action-while <nb> (67)
        on left: 56
        on right: 54
    printblock (68)
        on left: 57
        on right: 45
    condition <nb> (69)
        on left: 58 59 60 61
        on right: 48 49 50 54 57 59 60 61
    equality_expression <nb> (70)
        on left: 62 63 64
        on right: 25 26 32 39 41 46 47 58 63 64
    compare <nb> (71)
        on left: 65 66 67 68 69
        on right: 62 63 64 66 67 68 69
    add_sub <nb> (72)
        on left: 70 71 72
        on right: 65 66 67 68 69 71 72
    div_mul <nb> (73)
        on left: 73 74 75
        on right: 70 71 72 74 75
    single_value <nb> (74)
        on left: 76 77 78
        on right: 73 74 75


State 0

    0 $accept: • program $end

    $end      reduce using rule 1 (program)
    $default  reduce using rule 4 (action-start)

    program       go to state 1
    action-start  go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    2 program: action-start • main_function
    3        | action-start • function_list main_function

    tINT   shift, and go to state 4
    tVOID  shift, and go to state 5

    function_list  go to state 6
    function       go to state 7
    main_function  go to state 8
    function_type  go to state 9


State 3

    0 $accept: program $end •

    $default  accept


State 4

   14 function_type: tINT •

    $default  reduce using rule 14 (function_type)


State 5

   13 function_type: tVOID •

    $default  reduce using rule 13 (function_type)


State 6

    3 program: action-start function_list • main_function
    6 function_list: function_list • function

    tINT   shift, and go to state 4
    tVOID  shift, and go to state 5

    function       go to state 10
    main_function  go to state 11
    function_type  go to state 9


State 7

    5 function_list: function •

    $default  reduce using rule 5 (function_list)


State 8

    2 program: action-start main_function •

    $default  reduce using rule 2 (program)


State 9

    8 function: function_type • tID action-inc $@1 tLPAR parameter_list tRPAR tLBRACE body tRBRACE
   12 main_function: function_type • tMAIN action-inc $@2 tLPAR parameter_list tRPAR tLBRACE body tRBRACE action-dec

    tMAIN  shift, and go to state 12
    tID    shift, and go to state 13


State 10

    6 function_list: function_list function •

    $default  reduce using rule 6 (function_list)


State 11

    3 program: action-start function_list main_function •

    $default  reduce using rule 3 (program)


State 12

   12 main_function: function_type tMAIN • action-inc $@2 tLPAR parameter_list tRPAR tLBRACE body tRBRACE action-dec

    $default  reduce using rule 9 (action-inc)

    action-inc  go to state 14


State 13

    8 function: function_type tID • action-inc $@1 tLPAR parameter_list tRPAR tLBRACE body tRBRACE

    $default  reduce using rule 9 (action-inc)

    action-inc  go to state 15


State 14

   12 main_function: function_type tMAIN action-inc • $@2 tLPAR parameter_list tRPAR tLBRACE body tRBRACE action-dec

    $default  reduce using rule 11 ($@2)

    $@2  go to state 16


State 15

    8 function: function_type tID action-inc • $@1 tLPAR parameter_list tRPAR tLBRACE body tRBRACE

    $default  reduce using rule 7 ($@1)

    $@1  go to state 17


State 16

   12 main_function: function_type tMAIN action-inc $@2 • tLPAR parameter_list tRPAR tLBRACE body tRBRACE action-dec

    tLPAR  shift, and go to state 18


State 17

    8 function: function_type tID action-inc $@1 • tLPAR parameter_list tRPAR tLBRACE body tRBRACE

    tLPAR  shift, and go to state 19


State 18

   12 main_function: function_type tMAIN action-inc $@2 tLPAR • parameter_list tRPAR tLBRACE body tRBRACE action-dec

    tINT   shift, and go to state 20
    tVOID  shift, and go to state 21

    $default  reduce using rule 15 (parameter_list)

    parameter_list  go to state 22
    parameter       go to state 23
    variable_type   go to state 24


State 19

    8 function: function_type tID action-inc $@1 tLPAR • parameter_list tRPAR tLBRACE body tRBRACE

    tINT   shift, and go to state 20
    tVOID  shift, and go to state 21

    $default  reduce using rule 15 (parameter_list)

    parameter_list  go to state 25
    parameter       go to state 23
    variable_type   go to state 24


State 20

   20 variable_type: tINT •

    $default  reduce using rule 20 (variable_type)


State 21

   16 parameter_list: tVOID •

    $default  reduce using rule 16 (parameter_list)


State 22

   12 main_function: function_type tMAIN action-inc $@2 tLPAR parameter_list • tRPAR tLBRACE body tRBRACE action-dec
   18 parameter_list: parameter_list • tCOMMA parameter

    tRPAR   shift, and go to state 26
    tCOMMA  shift, and go to state 27


State 23

   17 parameter_list: parameter •

    $default  reduce using rule 17 (parameter_list)


State 24

   19 parameter: variable_type • identifiers_list

    tID  shift, and go to state 28

    identifiers_list  go to state 29


State 25

    8 function: function_type tID action-inc $@1 tLPAR parameter_list • tRPAR tLBRACE body tRBRACE
   18 parameter_list: parameter_list • tCOMMA parameter

    tRPAR   shift, and go to state 30
    tCOMMA  shift, and go to state 27


State 26

   12 main_function: function_type tMAIN action-inc $@2 tLPAR parameter_list tRPAR • tLBRACE body tRBRACE action-dec

    tLBRACE  shift, and go to state 31


State 27

   18 parameter_list: parameter_list tCOMMA • parameter

    tINT  shift, and go to state 20

    parameter      go to state 32
    variable_type  go to state 24


State 28

   38 identifiers_list: tID •
   39                 | tID • tASSIGN equality_expression

    tASSIGN  shift, and go to state 33

    $default  reduce using rule 38 (identifiers_list)


State 29

   19 parameter: variable_type identifiers_list •
   40 identifiers_list: identifiers_list • tCOMMA tID
   41                 | identifiers_list • tCOMMA tID tASSIGN equality_expression

    tCOMMA  shift, and go to state 34

    tCOMMA    [reduce using rule 19 (parameter)]
    $default  reduce using rule 19 (parameter)


State 30

    8 function: function_type tID action-inc $@1 tLPAR parameter_list tRPAR • tLBRACE body tRBRACE

    tLBRACE  shift, and go to state 35


State 31

   12 main_function: function_type tMAIN action-inc $@2 tLPAR parameter_list tRPAR tLBRACE • body tRBRACE action-dec

    tIF      shift, and go to state 36
    tWHILE   shift, and go to state 37
    tPRINT   shift, and go to state 38
    tRETURN  shift, and go to state 39
    tINT     shift, and go to state 20
    tID      shift, and go to state 40

    $default  reduce using rule 27 (body)

    variable_type     go to state 41
    body              go to state 42
    return            go to state 43
    instruction_list  go to state 44
    declaration_list  go to state 45
    declaration       go to state 46
    instruction       go to state 47
    assignment_list   go to state 48
    ifblock           go to state 49
    whileblock        go to state 50
    printblock        go to state 51


State 32

   18 parameter_list: parameter_list tCOMMA parameter •

    $default  reduce using rule 18 (parameter_list)


State 33

   39 identifiers_list: tID tASSIGN • equality_expression

    tNB  shift, and go to state 52
    tID  shift, and go to state 53

    functionCall         go to state 54
    equality_expression  go to state 55
    compare              go to state 56
    add_sub              go to state 57
    div_mul              go to state 58
    single_value         go to state 59


State 34

   40 identifiers_list: identifiers_list tCOMMA • tID
   41                 | identifiers_list tCOMMA • tID tASSIGN equality_expression

    tID  shift, and go to state 60


State 35

    8 function: function_type tID action-inc $@1 tLPAR parameter_list tRPAR tLBRACE • body tRBRACE

    tIF      shift, and go to state 36
    tWHILE   shift, and go to state 37
    tPRINT   shift, and go to state 38
    tRETURN  shift, and go to state 39
    tINT     shift, and go to state 20
    tID      shift, and go to state 40

    $default  reduce using rule 27 (body)

    variable_type     go to state 41
    body              go to state 61
    return            go to state 43
    instruction_list  go to state 44
    declaration_list  go to state 45
    declaration       go to state 46
    instruction       go to state 47
    assignment_list   go to state 48
    ifblock           go to state 49
    whileblock        go to state 50
    printblock        go to state 51


State 36

   48 ifblock: tIF • tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex
   49        | tIF • tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex
   50        | tIF • tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE ifblock

    tLPAR  shift, and go to state 62


State 37

   54 whileblock: tWHILE • tLPAR action-condition condition tRPAR action-while tLBRACE body tRBRACE

    tLPAR  shift, and go to state 63


State 38

   57 printblock: tPRINT • tLPAR condition tRPAR tSEMI

    tLPAR  shift, and go to state 64


State 39

   32 return: tRETURN • equality_expression tSEMI

    tNB  shift, and go to state 52
    tID  shift, and go to state 53

    functionCall         go to state 54
    equality_expression  go to state 65
    compare              go to state 56
    add_sub              go to state 57
    div_mul              go to state 58
    single_value         go to state 59


State 40

   46 assignment_list: tID • tASSIGN equality_expression tSEMI
   47                | tID • tASSIGN equality_expression tCOMMA assignment_list

    tASSIGN  shift, and go to state 66


State 41

   37 declaration: variable_type • identifiers_list tSEMI

    tID  shift, and go to state 28

    identifiers_list  go to state 67


State 42

   12 main_function: function_type tMAIN action-inc $@2 tLPAR parameter_list tRPAR tLBRACE body • tRBRACE action-dec

    tRBRACE  shift, and go to state 68


State 43

   31 body: return •

    $default  reduce using rule 31 (body)


State 44

   29 body: instruction_list •
   34 instruction_list: instruction_list • instruction

    tIF     shift, and go to state 36
    tWHILE  shift, and go to state 37
    tPRINT  shift, and go to state 38
    tID     shift, and go to state 40

    $default  reduce using rule 29 (body)

    instruction      go to state 69
    assignment_list  go to state 48
    ifblock          go to state 49
    whileblock       go to state 50
    printblock       go to state 51


State 45

   28 body: declaration_list •
   30     | declaration_list • instruction_list
   36 declaration_list: declaration_list • declaration

    tIF     shift, and go to state 36
    tWHILE  shift, and go to state 37
    tPRINT  shift, and go to state 38
    tINT    shift, and go to state 20
    tID     shift, and go to state 40

    $default  reduce using rule 28 (body)

    variable_type     go to state 41
    instruction_list  go to state 70
    declaration       go to state 71
    instruction       go to state 47
    assignment_list   go to state 48
    ifblock           go to state 49
    whileblock        go to state 50
    printblock        go to state 51


State 46

   35 declaration_list: declaration •

    $default  reduce using rule 35 (declaration_list)


State 47

   33 instruction_list: instruction •

    $default  reduce using rule 33 (instruction_list)


State 48

   42 instruction: assignment_list •

    $default  reduce using rule 42 (instruction)


State 49

   43 instruction: ifblock •

    $default  reduce using rule 43 (instruction)


State 50

   44 instruction: whileblock •

    $default  reduce using rule 44 (instruction)


State 51

   45 instruction: printblock •

    $default  reduce using rule 45 (instruction)


State 52

   78 single_value: tNB •

    $default  reduce using rule 78 (single_value)


State 53

   21 functionCall: tID • tLPAR action-call0 action-call1 argument_list tRPAR
   77 single_value: tID •

    tLPAR  shift, and go to state 72

    $default  reduce using rule 77 (single_value)


State 54

   76 single_value: functionCall •

    $default  reduce using rule 76 (single_value)


State 55

   39 identifiers_list: tID tASSIGN equality_expression •
   63 equality_expression: equality_expression • tEQ compare
   64                    | equality_expression • tNE compare

    tNE  shift, and go to state 73
    tEQ  shift, and go to state 74

    $default  reduce using rule 39 (identifiers_list)


State 56

   62 equality_expression: compare •
   66 compare: compare • tLT add_sub
   67        | compare • tGT add_sub
   68        | compare • tLE add_sub
   69        | compare • tGE add_sub

    tLT  shift, and go to state 75
    tGT  shift, and go to state 76
    tGE  shift, and go to state 77
    tLE  shift, and go to state 78

    $default  reduce using rule 62 (equality_expression)


State 57

   65 compare: add_sub •
   71 add_sub: add_sub • tADD div_mul
   72        | add_sub • tSUB div_mul

    tADD  shift, and go to state 79
    tSUB  shift, and go to state 80

    $default  reduce using rule 65 (compare)


State 58

   70 add_sub: div_mul •
   74 div_mul: div_mul • tMUL single_value
   75        | div_mul • tDIV single_value

    tMUL  shift, and go to state 81
    tDIV  shift, and go to state 82

    $default  reduce using rule 70 (add_sub)


State 59

   73 div_mul: single_value •

    $default  reduce using rule 73 (div_mul)


State 60

   40 identifiers_list: identifiers_list tCOMMA tID •
   41                 | identifiers_list tCOMMA tID • tASSIGN equality_expression

    tASSIGN  shift, and go to state 83

    $default  reduce using rule 40 (identifiers_list)


State 61

    8 function: function_type tID action-inc $@1 tLPAR parameter_list tRPAR tLBRACE body • tRBRACE

    tRBRACE  shift, and go to state 84


State 62

   48 ifblock: tIF tLPAR • condition tRPAR action-if tLBRACE body tRBRACE action-getIndex
   49        | tIF tLPAR • condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex
   50        | tIF tLPAR • condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE ifblock

    tNOT  shift, and go to state 85
    tNB   shift, and go to state 52
    tID   shift, and go to state 53

    functionCall         go to state 54
    condition            go to state 86
    equality_expression  go to state 87
    compare              go to state 56
    add_sub              go to state 57
    div_mul              go to state 58
    single_value         go to state 59


State 63

   54 whileblock: tWHILE tLPAR • action-condition condition tRPAR action-while tLBRACE body tRBRACE

    $default  reduce using rule 55 (action-condition)

    action-condition  go to state 88


State 64

   57 printblock: tPRINT tLPAR • condition tRPAR tSEMI

    tNOT  shift, and go to state 85
    tNB   shift, and go to state 52
    tID   shift, and go to state 53

    functionCall         go to state 54
    condition            go to state 89
    equality_expression  go to state 87
    compare              go to state 56
    add_sub              go to state 57
    div_mul              go to state 58
    single_value         go to state 59


State 65

   32 return: tRETURN equality_expression • tSEMI
   63 equality_expression: equality_expression • tEQ compare
   64                    | equality_expression • tNE compare

    tNE    shift, and go to state 73
    tEQ    shift, and go to state 74
    tSEMI  shift, and go to state 90


State 66

   46 assignment_list: tID tASSIGN • equality_expression tSEMI
   47                | tID tASSIGN • equality_expression tCOMMA assignment_list

    tNB  shift, and go to state 52
    tID  shift, and go to state 53

    functionCall         go to state 54
    equality_expression  go to state 91
    compare              go to state 56
    add_sub              go to state 57
    div_mul              go to state 58
    single_value         go to state 59


State 67

   37 declaration: variable_type identifiers_list • tSEMI
   40 identifiers_list: identifiers_list • tCOMMA tID
   41                 | identifiers_list • tCOMMA tID tASSIGN equality_expression

    tSEMI   shift, and go to state 92
    tCOMMA  shift, and go to state 34


State 68

   12 main_function: function_type tMAIN action-inc $@2 tLPAR parameter_list tRPAR tLBRACE body tRBRACE • action-dec

    $default  reduce using rule 10 (action-dec)

    action-dec  go to state 93


State 69

   34 instruction_list: instruction_list instruction •

    $default  reduce using rule 34 (instruction_list)


State 70

   30 body: declaration_list instruction_list •
   34 instruction_list: instruction_list • instruction

    tIF     shift, and go to state 36
    tWHILE  shift, and go to state 37
    tPRINT  shift, and go to state 38
    tID     shift, and go to state 40

    $default  reduce using rule 30 (body)

    instruction      go to state 69
    assignment_list  go to state 48
    ifblock          go to state 49
    whileblock       go to state 50
    printblock       go to state 51


State 71

   36 declaration_list: declaration_list declaration •

    $default  reduce using rule 36 (declaration_list)


State 72

   21 functionCall: tID tLPAR • action-call0 action-call1 argument_list tRPAR

    $default  reduce using rule 22 (action-call0)

    action-call0  go to state 94


State 73

   64 equality_expression: equality_expression tNE • compare

    tNB  shift, and go to state 52
    tID  shift, and go to state 53

    functionCall  go to state 54
    compare       go to state 95
    add_sub       go to state 57
    div_mul       go to state 58
    single_value  go to state 59


State 74

   63 equality_expression: equality_expression tEQ • compare

    tNB  shift, and go to state 52
    tID  shift, and go to state 53

    functionCall  go to state 54
    compare       go to state 96
    add_sub       go to state 57
    div_mul       go to state 58
    single_value  go to state 59


State 75

   66 compare: compare tLT • add_sub

    tNB  shift, and go to state 52
    tID  shift, and go to state 53

    functionCall  go to state 54
    add_sub       go to state 97
    div_mul       go to state 58
    single_value  go to state 59


State 76

   67 compare: compare tGT • add_sub

    tNB  shift, and go to state 52
    tID  shift, and go to state 53

    functionCall  go to state 54
    add_sub       go to state 98
    div_mul       go to state 58
    single_value  go to state 59


State 77

   69 compare: compare tGE • add_sub

    tNB  shift, and go to state 52
    tID  shift, and go to state 53

    functionCall  go to state 54
    add_sub       go to state 99
    div_mul       go to state 58
    single_value  go to state 59


State 78

   68 compare: compare tLE • add_sub

    tNB  shift, and go to state 52
    tID  shift, and go to state 53

    functionCall  go to state 54
    add_sub       go to state 100
    div_mul       go to state 58
    single_value  go to state 59


State 79

   71 add_sub: add_sub tADD • div_mul

    tNB  shift, and go to state 52
    tID  shift, and go to state 53

    functionCall  go to state 54
    div_mul       go to state 101
    single_value  go to state 59


State 80

   72 add_sub: add_sub tSUB • div_mul

    tNB  shift, and go to state 52
    tID  shift, and go to state 53

    functionCall  go to state 54
    div_mul       go to state 102
    single_value  go to state 59


State 81

   74 div_mul: div_mul tMUL • single_value

    tNB  shift, and go to state 52
    tID  shift, and go to state 53

    functionCall  go to state 54
    single_value  go to state 103


State 82

   75 div_mul: div_mul tDIV • single_value

    tNB  shift, and go to state 52
    tID  shift, and go to state 53

    functionCall  go to state 54
    single_value  go to state 104


State 83

   41 identifiers_list: identifiers_list tCOMMA tID tASSIGN • equality_expression

    tNB  shift, and go to state 52
    tID  shift, and go to state 53

    functionCall         go to state 54
    equality_expression  go to state 105
    compare              go to state 56
    add_sub              go to state 57
    div_mul              go to state 58
    single_value         go to state 59


State 84

    8 function: function_type tID action-inc $@1 tLPAR parameter_list tRPAR tLBRACE body tRBRACE •

    $default  reduce using rule 8 (function)


State 85

   61 condition: tNOT • condition

    tNOT  shift, and go to state 85
    tNB   shift, and go to state 52
    tID   shift, and go to state 53

    functionCall         go to state 54
    condition            go to state 106
    equality_expression  go to state 87
    compare              go to state 56
    add_sub              go to state 57
    div_mul              go to state 58
    single_value         go to state 59


State 86

   48 ifblock: tIF tLPAR condition • tRPAR action-if tLBRACE body tRBRACE action-getIndex
   49        | tIF tLPAR condition • tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex
   50        | tIF tLPAR condition • tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE ifblock
   59 condition: condition • tAND condition
   60          | condition • tOR condition

    tAND   shift, and go to state 107
    tOR    shift, and go to state 108
    tRPAR  shift, and go to state 109


State 87

   58 condition: equality_expression •
   63 equality_expression: equality_expression • tEQ compare
   64                    | equality_expression • tNE compare

    tNE  shift, and go to state 73
    tEQ  shift, and go to state 74

    $default  reduce using rule 58 (condition)


State 88

   54 whileblock: tWHILE tLPAR action-condition • condition tRPAR action-while tLBRACE body tRBRACE

    tNOT  shift, and go to state 85
    tNB   shift, and go to state 52
    tID   shift, and go to state 53

    functionCall         go to state 54
    condition            go to state 110
    equality_expression  go to state 87
    compare              go to state 56
    add_sub              go to state 57
    div_mul              go to state 58
    single_value         go to state 59


State 89

   57 printblock: tPRINT tLPAR condition • tRPAR tSEMI
   59 condition: condition • tAND condition
   60          | condition • tOR condition

    tAND   shift, and go to state 107
    tOR    shift, and go to state 108
    tRPAR  shift, and go to state 111


State 90

   32 return: tRETURN equality_expression tSEMI •

    $default  reduce using rule 32 (return)


State 91

   46 assignment_list: tID tASSIGN equality_expression • tSEMI
   47                | tID tASSIGN equality_expression • tCOMMA assignment_list
   63 equality_expression: equality_expression • tEQ compare
   64                    | equality_expression • tNE compare

    tNE     shift, and go to state 73
    tEQ     shift, and go to state 74
    tSEMI   shift, and go to state 112
    tCOMMA  shift, and go to state 113


State 92

   37 declaration: variable_type identifiers_list tSEMI •

    $default  reduce using rule 37 (declaration)


State 93

   12 main_function: function_type tMAIN action-inc $@2 tLPAR parameter_list tRPAR tLBRACE body tRBRACE action-dec •

    $default  reduce using rule 12 (main_function)


State 94

   21 functionCall: tID tLPAR action-call0 • action-call1 argument_list tRPAR

    $default  reduce using rule 23 (action-call1)

    action-call1  go to state 114


State 95

   64 equality_expression: equality_expression tNE compare •
   66 compare: compare • tLT add_sub
   67        | compare • tGT add_sub
   68        | compare • tLE add_sub
   69        | compare • tGE add_sub

    tLT  shift, and go to state 75
    tGT  shift, and go to state 76
    tGE  shift, and go to state 77
    tLE  shift, and go to state 78

    $default  reduce using rule 64 (equality_expression)


State 96

   63 equality_expression: equality_expression tEQ compare •
   66 compare: compare • tLT add_sub
   67        | compare • tGT add_sub
   68        | compare • tLE add_sub
   69        | compare • tGE add_sub

    tLT  shift, and go to state 75
    tGT  shift, and go to state 76
    tGE  shift, and go to state 77
    tLE  shift, and go to state 78

    $default  reduce using rule 63 (equality_expression)


State 97

   66 compare: compare tLT add_sub •
   71 add_sub: add_sub • tADD div_mul
   72        | add_sub • tSUB div_mul

    tADD  shift, and go to state 79
    tSUB  shift, and go to state 80

    $default  reduce using rule 66 (compare)


State 98

   67 compare: compare tGT add_sub •
   71 add_sub: add_sub • tADD div_mul
   72        | add_sub • tSUB div_mul

    tADD  shift, and go to state 79
    tSUB  shift, and go to state 80

    $default  reduce using rule 67 (compare)


State 99

   69 compare: compare tGE add_sub •
   71 add_sub: add_sub • tADD div_mul
   72        | add_sub • tSUB div_mul

    tADD  shift, and go to state 79
    tSUB  shift, and go to state 80

    $default  reduce using rule 69 (compare)


State 100

   68 compare: compare tLE add_sub •
   71 add_sub: add_sub • tADD div_mul
   72        | add_sub • tSUB div_mul

    tADD  shift, and go to state 79
    tSUB  shift, and go to state 80

    $default  reduce using rule 68 (compare)


State 101

   71 add_sub: add_sub tADD div_mul •
   74 div_mul: div_mul • tMUL single_value
   75        | div_mul • tDIV single_value

    tMUL  shift, and go to state 81
    tDIV  shift, and go to state 82

    $default  reduce using rule 71 (add_sub)


State 102

   72 add_sub: add_sub tSUB div_mul •
   74 div_mul: div_mul • tMUL single_value
   75        | div_mul • tDIV single_value

    tMUL  shift, and go to state 81
    tDIV  shift, and go to state 82

    $default  reduce using rule 72 (add_sub)


State 103

   74 div_mul: div_mul tMUL single_value •

    $default  reduce using rule 74 (div_mul)


State 104

   75 div_mul: div_mul tDIV single_value •

    $default  reduce using rule 75 (div_mul)


State 105

   41 identifiers_list: identifiers_list tCOMMA tID tASSIGN equality_expression •
   63 equality_expression: equality_expression • tEQ compare
   64                    | equality_expression • tNE compare

    tNE  shift, and go to state 73
    tEQ  shift, and go to state 74

    $default  reduce using rule 41 (identifiers_list)


State 106

   59 condition: condition • tAND condition
   60          | condition • tOR condition
   61          | tNOT condition •

    tAND  shift, and go to state 107
    tOR   shift, and go to state 108

    tAND      [reduce using rule 61 (condition)]
    tOR       [reduce using rule 61 (condition)]
    $default  reduce using rule 61 (condition)


State 107

   59 condition: condition tAND • condition

    tNOT  shift, and go to state 85
    tNB   shift, and go to state 52
    tID   shift, and go to state 53

    functionCall         go to state 54
    condition            go to state 115
    equality_expression  go to state 87
    compare              go to state 56
    add_sub              go to state 57
    div_mul              go to state 58
    single_value         go to state 59


State 108

   60 condition: condition tOR • condition

    tNOT  shift, and go to state 85
    tNB   shift, and go to state 52
    tID   shift, and go to state 53

    functionCall         go to state 54
    condition            go to state 116
    equality_expression  go to state 87
    compare              go to state 56
    add_sub              go to state 57
    div_mul              go to state 58
    single_value         go to state 59


State 109

   48 ifblock: tIF tLPAR condition tRPAR • action-if tLBRACE body tRBRACE action-getIndex
   49        | tIF tLPAR condition tRPAR • action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex
   50        | tIF tLPAR condition tRPAR • action-if tLBRACE body tRBRACE action-getIndex tELSE ifblock

    $default  reduce using rule 51 (action-if)

    action-if  go to state 117


State 110

   54 whileblock: tWHILE tLPAR action-condition condition • tRPAR action-while tLBRACE body tRBRACE
   59 condition: condition • tAND condition
   60          | condition • tOR condition

    tAND   shift, and go to state 107
    tOR    shift, and go to state 108
    tRPAR  shift, and go to state 118


State 111

   57 printblock: tPRINT tLPAR condition tRPAR • tSEMI

    tSEMI  shift, and go to state 119


State 112

   46 assignment_list: tID tASSIGN equality_expression tSEMI •

    $default  reduce using rule 46 (assignment_list)


State 113

   47 assignment_list: tID tASSIGN equality_expression tCOMMA • assignment_list

    tID  shift, and go to state 40

    assignment_list  go to state 120


State 114

   21 functionCall: tID tLPAR action-call0 action-call1 • argument_list tRPAR

    tNB  shift, and go to state 52
    tID  shift, and go to state 53

    $default  reduce using rule 24 (argument_list)

    functionCall         go to state 54
    argument_list        go to state 121
    equality_expression  go to state 122
    compare              go to state 56
    add_sub              go to state 57
    div_mul              go to state 58
    single_value         go to state 59


State 115

   59 condition: condition • tAND condition
   59          | condition tAND condition •
   60          | condition • tOR condition

    $default  reduce using rule 59 (condition)


State 116

   59 condition: condition • tAND condition
   60          | condition • tOR condition
   60          | condition tOR condition •

    $default  reduce using rule 60 (condition)


State 117

   48 ifblock: tIF tLPAR condition tRPAR action-if • tLBRACE body tRBRACE action-getIndex
   49        | tIF tLPAR condition tRPAR action-if • tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex
   50        | tIF tLPAR condition tRPAR action-if • tLBRACE body tRBRACE action-getIndex tELSE ifblock

    tLBRACE  shift, and go to state 123


State 118

   54 whileblock: tWHILE tLPAR action-condition condition tRPAR • action-while tLBRACE body tRBRACE

    $default  reduce using rule 56 (action-while)

    action-while  go to state 124


State 119

   57 printblock: tPRINT tLPAR condition tRPAR tSEMI •

    $default  reduce using rule 57 (printblock)


State 120

   47 assignment_list: tID tASSIGN equality_expression tCOMMA assignment_list •

    $default  reduce using rule 47 (assignment_list)


State 121

   21 functionCall: tID tLPAR action-call0 action-call1 argument_list • tRPAR
   25 argument_list: argument_list • tCOMMA equality_expression

    tRPAR   shift, and go to state 125
    tCOMMA  shift, and go to state 126


State 122

   26 argument_list: equality_expression •
   63 equality_expression: equality_expression • tEQ compare
   64                    | equality_expression • tNE compare

    tNE  shift, and go to state 73
    tEQ  shift, and go to state 74

    $default  reduce using rule 26 (argument_list)


State 123

   48 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE • body tRBRACE action-getIndex
   49        | tIF tLPAR condition tRPAR action-if tLBRACE • body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex
   50        | tIF tLPAR condition tRPAR action-if tLBRACE • body tRBRACE action-getIndex tELSE ifblock

    tIF      shift, and go to state 36
    tWHILE   shift, and go to state 37
    tPRINT   shift, and go to state 38
    tRETURN  shift, and go to state 39
    tINT     shift, and go to state 20
    tID      shift, and go to state 40

    $default  reduce using rule 27 (body)

    variable_type     go to state 41
    body              go to state 127
    return            go to state 43
    instruction_list  go to state 44
    declaration_list  go to state 45
    declaration       go to state 46
    instruction       go to state 47
    assignment_list   go to state 48
    ifblock           go to state 49
    whileblock        go to state 50
    printblock        go to state 51


State 124

   54 whileblock: tWHILE tLPAR action-condition condition tRPAR action-while • tLBRACE body tRBRACE

    tLBRACE  shift, and go to state 128


State 125

   21 functionCall: tID tLPAR action-call0 action-call1 argument_list tRPAR •

    $default  reduce using rule 21 (functionCall)


State 126

   25 argument_list: argument_list tCOMMA • equality_expression

    tNB  shift, and go to state 52
    tID  shift, and go to state 53

    functionCall         go to state 54
    equality_expression  go to state 129
    compare              go to state 56
    add_sub              go to state 57
    div_mul              go to state 58
    single_value         go to state 59


State 127

   48 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body • tRBRACE action-getIndex
   49        | tIF tLPAR condition tRPAR action-if tLBRACE body • tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex
   50        | tIF tLPAR condition tRPAR action-if tLBRACE body • tRBRACE action-getIndex tELSE ifblock

    tRBRACE  shift, and go to state 130


State 128

   54 whileblock: tWHILE tLPAR action-condition condition tRPAR action-while tLBRACE • body tRBRACE

    tIF      shift, and go to state 36
    tWHILE   shift, and go to state 37
    tPRINT   shift, and go to state 38
    tRETURN  shift, and go to state 39
    tINT     shift, and go to state 20
    tID      shift, and go to state 40

    $default  reduce using rule 27 (body)

    variable_type     go to state 41
    body              go to state 131
    return            go to state 43
    instruction_list  go to state 44
    declaration_list  go to state 45
    declaration       go to state 46
    instruction       go to state 47
    assignment_list   go to state 48
    ifblock           go to state 49
    whileblock        go to state 50
    printblock        go to state 51


State 129

   25 argument_list: argument_list tCOMMA equality_expression •
   63 equality_expression: equality_expression • tEQ compare
   64                    | equality_expression • tNE compare

    tNE  shift, and go to state 73
    tEQ  shift, and go to state 74

    $default  reduce using rule 25 (argument_list)


State 130

   48 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE • action-getIndex
   49        | tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE • action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex
   50        | tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE • action-getIndex tELSE ifblock

    $default  reduce using rule 53 (action-getIndex)

    action-getIndex  go to state 132


State 131

   54 whileblock: tWHILE tLPAR action-condition condition tRPAR action-while tLBRACE body • tRBRACE

    tRBRACE  shift, and go to state 133


State 132

   48 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex •
   49        | tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex • tELSE action-else tLBRACE body tRBRACE action-getIndex
   50        | tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex • tELSE ifblock

    tELSE  shift, and go to state 134

    $default  reduce using rule 48 (ifblock)


State 133

   54 whileblock: tWHILE tLPAR action-condition condition tRPAR action-while tLBRACE body tRBRACE •

    $default  reduce using rule 54 (whileblock)


State 134

   49 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE • action-else tLBRACE body tRBRACE action-getIndex
   50        | tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE • ifblock

    tIF  shift, and go to state 36

    $default  reduce using rule 52 (action-else)

    ifblock      go to state 135
    action-else  go to state 136


State 135

   50 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE ifblock •

    $default  reduce using rule 50 (ifblock)


State 136

   49 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else • tLBRACE body tRBRACE action-getIndex

    tLBRACE  shift, and go to state 137


State 137

   49 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE • body tRBRACE action-getIndex

    tIF      shift, and go to state 36
    tWHILE   shift, and go to state 37
    tPRINT   shift, and go to state 38
    tRETURN  shift, and go to state 39
    tINT     shift, and go to state 20
    tID      shift, and go to state 40

    $default  reduce using rule 27 (body)

    variable_type     go to state 41
    body              go to state 138
    return            go to state 43
    instruction_list  go to state 44
    declaration_list  go to state 45
    declaration       go to state 46
    instruction       go to state 47
    assignment_list   go to state 48
    ifblock           go to state 49
    whileblock        go to state 50
    printblock        go to state 51


State 138

   49 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body • tRBRACE action-getIndex

    tRBRACE  shift, and go to state 139


State 139

   49 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE • action-getIndex

    $default  reduce using rule 53 (action-getIndex)

    action-getIndex  go to state 140


State 140

   49 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex •

    $default  reduce using rule 49 (ifblock)
