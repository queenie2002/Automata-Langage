Terminals unused in grammar

    tCONST
    tERROR


State 93 conflicts: 3 reduce/reduce
State 103 conflicts: 2 shift/reduce
State 104 conflicts: 2 shift/reduce


Grammar

    0 $accept: program $end

    1 program: ε
    2        | action-start main_function
    3        | action-start function_list main_function

    4 action-start: ε

    5 function_list: function
    6              | function_list function

    7 $@1: ε

    8 function: function_type tID tLPAR parameter_list tRPAR tLBRACE $@1 body tRBRACE

    9 $@2: ε

   10 main_function: function_type tMAIN $@2 tLPAR parameter_list tRPAR tLBRACE body tRBRACE

   11 function_type: tVOID
   12              | tINT

   13 parameter_list: ε
   14               | tVOID
   15               | parameter
   16               | parameter_list tCOMMA parameter

   17 parameter: parameter_type tID
   18          | parameter_type tID tASSIGN equality_expression

   19 parameter_type: tINT

   20 functionCall: tID tLPAR action-call0 action-call1 argument_list tRPAR

   21 action-call0: ε

   22 action-call1: ε

   23 argument_list: ε
   24              | argument
   25              | argument_list argument

   26 argument: add_sub

   27 body: ε
   28     | declaration_list
   29     | instruction_list
   30     | declaration_list instruction_list
   31     | return

   32 return: tRETURN add_sub tSEMI

   33 instruction_list: instruction
   34                 | instruction_list instruction

   35 declaration_list: declaration
   36                 | declaration_list declaration

   37 declaration: declaration_type identifiers_list tSEMI

   38 declaration_type: tINT

   39 identifiers_list: tID
   40                 | tID tASSIGN add_sub
   41                 | identifiers_list tCOMMA tID
   42                 | identifiers_list tCOMMA tID tASSIGN add_sub

   43 instruction: assignment_list
   44            | ifblock
   45            | whileblock
   46            | printblock

   47 assignment_list: tID tASSIGN add_sub tSEMI
   48                | tID tASSIGN add_sub tCOMMA assignment_list

   49 $@3: ε

   50 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex $@3

   51 $@4: ε

   52 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex $@4

   53 $@5: ε

   54 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE ifblock $@5

   55 action-if: ε

   56 action-else: ε

   57 action-getIndex: ε

   58 $@6: ε

   59 whileblock: tWHILE tLPAR action-condition condition tRPAR action-while tLBRACE body tRBRACE $@6

   60 action-condition: ε

   61 action-while: ε

   62 printblock: tPRINT tLPAR single_value tRPAR tSEMI

   63 condition: tID
   64          | equality_expression
   65          | condition tAND condition
   66          | condition tOR condition
   67          | tNOT condition

   68 equality_expression: compare
   69                    | equality_expression tEQ compare
   70                    | equality_expression tNE compare

   71 compare: add_sub
   72        | compare tLT add_sub
   73        | compare tGT add_sub
   74        | compare tLE add_sub
   75        | compare tGE add_sub

   76 add_sub: div_mul
   77        | add_sub tADD div_mul
   78        | add_sub tSUB div_mul

   79 div_mul: single_value
   80        | div_mul tMUL single_value
   81        | div_mul tDIV single_value

   82 single_value: functionCall
   83             | tID
   84             | tNB


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    tADD (258) 77
    tSUB (259) 78
    tMUL (260) 80
    tDIV (261) 81
    tLT (262) 72
    tGT (263) 73
    tNE (264) 70
    tEQ (265) 69
    tGE (266) 75
    tLE (267) 74
    tASSIGN (268) 18 40 42 47 48
    tAND (269) 65
    tOR (270) 66
    tNOT (271) 67
    tLBRACE (272) 8 10 50 52 54 59
    tRBRACE (273) 8 10 50 52 54 59
    tLPAR (274) 8 10 20 50 52 54 59 62
    tRPAR (275) 8 10 20 50 52 54 59 62
    tSEMI (276) 32 37 47 62
    tCOMMA (277) 16 41 42 48
    tIF (278) 50 52 54
    tELSE (279) 52 54
    tWHILE (280) 59
    tPRINT (281) 62
    tRETURN (282) 32
    tINT (283) 12 19 38
    tVOID (284) 11 14
    tMAIN (285) 10
    tCONST (286)
    tERROR (287)
    tNB <nb> (288) 84
    tID <var> (289) 8 17 18 20 39 40 41 42 47 48 63 83


Nonterminals, with rules where they appear

    $accept (35)
        on left: 0
    program (36)
        on left: 1 2 3
        on right: 0
    action-start (37)
        on left: 4
        on right: 2 3
    function_list (38)
        on left: 5 6
        on right: 3 6
    function (39)
        on left: 8
        on right: 5 6
    $@1 (40)
        on left: 7
        on right: 8
    main_function (41)
        on left: 10
        on right: 2 3
    $@2 (42)
        on left: 9
        on right: 10
    function_type (43)
        on left: 11 12
        on right: 8 10
    parameter_list (44)
        on left: 13 14 15 16
        on right: 8 10 16
    parameter (45)
        on left: 17 18
        on right: 15 16
    parameter_type (46)
        on left: 19
        on right: 17 18
    functionCall <nb> (47)
        on left: 20
        on right: 82
    action-call0 <nb> (48)
        on left: 21
        on right: 20
    action-call1 <nb> (49)
        on left: 22
        on right: 20
    argument_list (50)
        on left: 23 24 25
        on right: 20 25
    argument (51)
        on left: 26
        on right: 24 25
    body (52)
        on left: 27 28 29 30 31
        on right: 8 10 50 52 54 59
    return (53)
        on left: 32
        on right: 31
    instruction_list (54)
        on left: 33 34
        on right: 29 30 34
    declaration_list (55)
        on left: 35 36
        on right: 28 30 36
    declaration (56)
        on left: 37
        on right: 35 36
    declaration_type (57)
        on left: 38
        on right: 37
    identifiers_list (58)
        on left: 39 40 41 42
        on right: 37 41 42
    instruction (59)
        on left: 43 44 45 46
        on right: 33 34
    assignment_list (60)
        on left: 47 48
        on right: 43 48
    ifblock (61)
        on left: 50 52 54
        on right: 44 54
    $@3 (62)
        on left: 49
        on right: 50
    $@4 (63)
        on left: 51
        on right: 52
    $@5 (64)
        on left: 53
        on right: 54
    action-if <nb> (65)
        on left: 55
        on right: 50 52 54
    action-else <nb> (66)
        on left: 56
        on right: 52
    action-getIndex <nb> (67)
        on left: 57
        on right: 50 52 54
    whileblock (68)
        on left: 59
        on right: 45
    $@6 (69)
        on left: 58
        on right: 59
    action-condition <nb> (70)
        on left: 60
        on right: 59
    action-while <nb> (71)
        on left: 61
        on right: 59
    printblock (72)
        on left: 62
        on right: 46
    condition <nb> (73)
        on left: 63 64 65 66 67
        on right: 50 52 54 59 65 66 67
    equality_expression <nb> (74)
        on left: 68 69 70
        on right: 18 64 69 70
    compare <nb> (75)
        on left: 71 72 73 74 75
        on right: 68 69 70 72 73 74 75
    add_sub <nb> (76)
        on left: 76 77 78
        on right: 26 32 40 42 47 48 71 72 73 74 75 77 78
    div_mul <nb> (77)
        on left: 79 80 81
        on right: 76 77 78 80 81
    single_value <nb> (78)
        on left: 82 83 84
        on right: 62 79 80 81


State 0

    0 $accept: • program $end

    $end      reduce using rule 1 (program)
    $default  reduce using rule 4 (action-start)

    program       go to state 1
    action-start  go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    2 program: action-start • main_function
    3        | action-start • function_list main_function

    tINT   shift, and go to state 4
    tVOID  shift, and go to state 5

    function_list  go to state 6
    function       go to state 7
    main_function  go to state 8
    function_type  go to state 9


State 3

    0 $accept: program $end •

    $default  accept


State 4

   12 function_type: tINT •

    $default  reduce using rule 12 (function_type)


State 5

   11 function_type: tVOID •

    $default  reduce using rule 11 (function_type)


State 6

    3 program: action-start function_list • main_function
    6 function_list: function_list • function

    tINT   shift, and go to state 4
    tVOID  shift, and go to state 5

    function       go to state 10
    main_function  go to state 11
    function_type  go to state 9


State 7

    5 function_list: function •

    $default  reduce using rule 5 (function_list)


State 8

    2 program: action-start main_function •

    $default  reduce using rule 2 (program)


State 9

    8 function: function_type • tID tLPAR parameter_list tRPAR tLBRACE $@1 body tRBRACE
   10 main_function: function_type • tMAIN $@2 tLPAR parameter_list tRPAR tLBRACE body tRBRACE

    tMAIN  shift, and go to state 12
    tID    shift, and go to state 13


State 10

    6 function_list: function_list function •

    $default  reduce using rule 6 (function_list)


State 11

    3 program: action-start function_list main_function •

    $default  reduce using rule 3 (program)


State 12

   10 main_function: function_type tMAIN • $@2 tLPAR parameter_list tRPAR tLBRACE body tRBRACE

    $default  reduce using rule 9 ($@2)

    $@2  go to state 14


State 13

    8 function: function_type tID • tLPAR parameter_list tRPAR tLBRACE $@1 body tRBRACE

    tLPAR  shift, and go to state 15


State 14

   10 main_function: function_type tMAIN $@2 • tLPAR parameter_list tRPAR tLBRACE body tRBRACE

    tLPAR  shift, and go to state 16


State 15

    8 function: function_type tID tLPAR • parameter_list tRPAR tLBRACE $@1 body tRBRACE

    tINT   shift, and go to state 17
    tVOID  shift, and go to state 18

    $default  reduce using rule 13 (parameter_list)

    parameter_list  go to state 19
    parameter       go to state 20
    parameter_type  go to state 21


State 16

   10 main_function: function_type tMAIN $@2 tLPAR • parameter_list tRPAR tLBRACE body tRBRACE

    tINT   shift, and go to state 17
    tVOID  shift, and go to state 18

    $default  reduce using rule 13 (parameter_list)

    parameter_list  go to state 22
    parameter       go to state 20
    parameter_type  go to state 21


State 17

   19 parameter_type: tINT •

    $default  reduce using rule 19 (parameter_type)


State 18

   14 parameter_list: tVOID •

    $default  reduce using rule 14 (parameter_list)


State 19

    8 function: function_type tID tLPAR parameter_list • tRPAR tLBRACE $@1 body tRBRACE
   16 parameter_list: parameter_list • tCOMMA parameter

    tRPAR   shift, and go to state 23
    tCOMMA  shift, and go to state 24


State 20

   15 parameter_list: parameter •

    $default  reduce using rule 15 (parameter_list)


State 21

   17 parameter: parameter_type • tID
   18          | parameter_type • tID tASSIGN equality_expression

    tID  shift, and go to state 25


State 22

   10 main_function: function_type tMAIN $@2 tLPAR parameter_list • tRPAR tLBRACE body tRBRACE
   16 parameter_list: parameter_list • tCOMMA parameter

    tRPAR   shift, and go to state 26
    tCOMMA  shift, and go to state 24


State 23

    8 function: function_type tID tLPAR parameter_list tRPAR • tLBRACE $@1 body tRBRACE

    tLBRACE  shift, and go to state 27


State 24

   16 parameter_list: parameter_list tCOMMA • parameter

    tINT  shift, and go to state 17

    parameter       go to state 28
    parameter_type  go to state 21


State 25

   17 parameter: parameter_type tID •
   18          | parameter_type tID • tASSIGN equality_expression

    tASSIGN  shift, and go to state 29

    $default  reduce using rule 17 (parameter)


State 26

   10 main_function: function_type tMAIN $@2 tLPAR parameter_list tRPAR • tLBRACE body tRBRACE

    tLBRACE  shift, and go to state 30


State 27

    8 function: function_type tID tLPAR parameter_list tRPAR tLBRACE • $@1 body tRBRACE

    $default  reduce using rule 7 ($@1)

    $@1  go to state 31


State 28

   16 parameter_list: parameter_list tCOMMA parameter •

    $default  reduce using rule 16 (parameter_list)


State 29

   18 parameter: parameter_type tID tASSIGN • equality_expression

    tNB  shift, and go to state 32
    tID  shift, and go to state 33

    functionCall         go to state 34
    equality_expression  go to state 35
    compare              go to state 36
    add_sub              go to state 37
    div_mul              go to state 38
    single_value         go to state 39


State 30

   10 main_function: function_type tMAIN $@2 tLPAR parameter_list tRPAR tLBRACE • body tRBRACE

    tIF      shift, and go to state 40
    tWHILE   shift, and go to state 41
    tPRINT   shift, and go to state 42
    tRETURN  shift, and go to state 43
    tINT     shift, and go to state 44
    tID      shift, and go to state 45

    $default  reduce using rule 27 (body)

    body              go to state 46
    return            go to state 47
    instruction_list  go to state 48
    declaration_list  go to state 49
    declaration       go to state 50
    declaration_type  go to state 51
    instruction       go to state 52
    assignment_list   go to state 53
    ifblock           go to state 54
    whileblock        go to state 55
    printblock        go to state 56


State 31

    8 function: function_type tID tLPAR parameter_list tRPAR tLBRACE $@1 • body tRBRACE

    tIF      shift, and go to state 40
    tWHILE   shift, and go to state 41
    tPRINT   shift, and go to state 42
    tRETURN  shift, and go to state 43
    tINT     shift, and go to state 44
    tID      shift, and go to state 45

    $default  reduce using rule 27 (body)

    body              go to state 57
    return            go to state 47
    instruction_list  go to state 48
    declaration_list  go to state 49
    declaration       go to state 50
    declaration_type  go to state 51
    instruction       go to state 52
    assignment_list   go to state 53
    ifblock           go to state 54
    whileblock        go to state 55
    printblock        go to state 56


State 32

   84 single_value: tNB •

    $default  reduce using rule 84 (single_value)


State 33

   20 functionCall: tID • tLPAR action-call0 action-call1 argument_list tRPAR
   83 single_value: tID •

    tLPAR  shift, and go to state 58

    $default  reduce using rule 83 (single_value)


State 34

   82 single_value: functionCall •

    $default  reduce using rule 82 (single_value)


State 35

   18 parameter: parameter_type tID tASSIGN equality_expression •
   69 equality_expression: equality_expression • tEQ compare
   70                    | equality_expression • tNE compare

    tNE  shift, and go to state 59
    tEQ  shift, and go to state 60

    $default  reduce using rule 18 (parameter)


State 36

   68 equality_expression: compare •
   72 compare: compare • tLT add_sub
   73        | compare • tGT add_sub
   74        | compare • tLE add_sub
   75        | compare • tGE add_sub

    tLT  shift, and go to state 61
    tGT  shift, and go to state 62
    tGE  shift, and go to state 63
    tLE  shift, and go to state 64

    $default  reduce using rule 68 (equality_expression)


State 37

   71 compare: add_sub •
   77 add_sub: add_sub • tADD div_mul
   78        | add_sub • tSUB div_mul

    tADD  shift, and go to state 65
    tSUB  shift, and go to state 66

    $default  reduce using rule 71 (compare)


State 38

   76 add_sub: div_mul •
   80 div_mul: div_mul • tMUL single_value
   81        | div_mul • tDIV single_value

    tMUL  shift, and go to state 67
    tDIV  shift, and go to state 68

    $default  reduce using rule 76 (add_sub)


State 39

   79 div_mul: single_value •

    $default  reduce using rule 79 (div_mul)


State 40

   50 ifblock: tIF • tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex $@3
   52        | tIF • tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex $@4
   54        | tIF • tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE ifblock $@5

    tLPAR  shift, and go to state 69


State 41

   59 whileblock: tWHILE • tLPAR action-condition condition tRPAR action-while tLBRACE body tRBRACE $@6

    tLPAR  shift, and go to state 70


State 42

   62 printblock: tPRINT • tLPAR single_value tRPAR tSEMI

    tLPAR  shift, and go to state 71


State 43

   32 return: tRETURN • add_sub tSEMI

    tNB  shift, and go to state 32
    tID  shift, and go to state 33

    functionCall  go to state 34
    add_sub       go to state 72
    div_mul       go to state 38
    single_value  go to state 39


State 44

   38 declaration_type: tINT •

    $default  reduce using rule 38 (declaration_type)


State 45

   47 assignment_list: tID • tASSIGN add_sub tSEMI
   48                | tID • tASSIGN add_sub tCOMMA assignment_list

    tASSIGN  shift, and go to state 73


State 46

   10 main_function: function_type tMAIN $@2 tLPAR parameter_list tRPAR tLBRACE body • tRBRACE

    tRBRACE  shift, and go to state 74


State 47

   31 body: return •

    $default  reduce using rule 31 (body)


State 48

   29 body: instruction_list •
   34 instruction_list: instruction_list • instruction

    tIF     shift, and go to state 40
    tWHILE  shift, and go to state 41
    tPRINT  shift, and go to state 42
    tID     shift, and go to state 45

    $default  reduce using rule 29 (body)

    instruction      go to state 75
    assignment_list  go to state 53
    ifblock          go to state 54
    whileblock       go to state 55
    printblock       go to state 56


State 49

   28 body: declaration_list •
   30     | declaration_list • instruction_list
   36 declaration_list: declaration_list • declaration

    tIF     shift, and go to state 40
    tWHILE  shift, and go to state 41
    tPRINT  shift, and go to state 42
    tINT    shift, and go to state 44
    tID     shift, and go to state 45

    $default  reduce using rule 28 (body)

    instruction_list  go to state 76
    declaration       go to state 77
    declaration_type  go to state 51
    instruction       go to state 52
    assignment_list   go to state 53
    ifblock           go to state 54
    whileblock        go to state 55
    printblock        go to state 56


State 50

   35 declaration_list: declaration •

    $default  reduce using rule 35 (declaration_list)


State 51

   37 declaration: declaration_type • identifiers_list tSEMI

    tID  shift, and go to state 78

    identifiers_list  go to state 79


State 52

   33 instruction_list: instruction •

    $default  reduce using rule 33 (instruction_list)


State 53

   43 instruction: assignment_list •

    $default  reduce using rule 43 (instruction)


State 54

   44 instruction: ifblock •

    $default  reduce using rule 44 (instruction)


State 55

   45 instruction: whileblock •

    $default  reduce using rule 45 (instruction)


State 56

   46 instruction: printblock •

    $default  reduce using rule 46 (instruction)


State 57

    8 function: function_type tID tLPAR parameter_list tRPAR tLBRACE $@1 body • tRBRACE

    tRBRACE  shift, and go to state 80


State 58

   20 functionCall: tID tLPAR • action-call0 action-call1 argument_list tRPAR

    $default  reduce using rule 21 (action-call0)

    action-call0  go to state 81


State 59

   70 equality_expression: equality_expression tNE • compare

    tNB  shift, and go to state 32
    tID  shift, and go to state 33

    functionCall  go to state 34
    compare       go to state 82
    add_sub       go to state 37
    div_mul       go to state 38
    single_value  go to state 39


State 60

   69 equality_expression: equality_expression tEQ • compare

    tNB  shift, and go to state 32
    tID  shift, and go to state 33

    functionCall  go to state 34
    compare       go to state 83
    add_sub       go to state 37
    div_mul       go to state 38
    single_value  go to state 39


State 61

   72 compare: compare tLT • add_sub

    tNB  shift, and go to state 32
    tID  shift, and go to state 33

    functionCall  go to state 34
    add_sub       go to state 84
    div_mul       go to state 38
    single_value  go to state 39


State 62

   73 compare: compare tGT • add_sub

    tNB  shift, and go to state 32
    tID  shift, and go to state 33

    functionCall  go to state 34
    add_sub       go to state 85
    div_mul       go to state 38
    single_value  go to state 39


State 63

   75 compare: compare tGE • add_sub

    tNB  shift, and go to state 32
    tID  shift, and go to state 33

    functionCall  go to state 34
    add_sub       go to state 86
    div_mul       go to state 38
    single_value  go to state 39


State 64

   74 compare: compare tLE • add_sub

    tNB  shift, and go to state 32
    tID  shift, and go to state 33

    functionCall  go to state 34
    add_sub       go to state 87
    div_mul       go to state 38
    single_value  go to state 39


State 65

   77 add_sub: add_sub tADD • div_mul

    tNB  shift, and go to state 32
    tID  shift, and go to state 33

    functionCall  go to state 34
    div_mul       go to state 88
    single_value  go to state 39


State 66

   78 add_sub: add_sub tSUB • div_mul

    tNB  shift, and go to state 32
    tID  shift, and go to state 33

    functionCall  go to state 34
    div_mul       go to state 89
    single_value  go to state 39


State 67

   80 div_mul: div_mul tMUL • single_value

    tNB  shift, and go to state 32
    tID  shift, and go to state 33

    functionCall  go to state 34
    single_value  go to state 90


State 68

   81 div_mul: div_mul tDIV • single_value

    tNB  shift, and go to state 32
    tID  shift, and go to state 33

    functionCall  go to state 34
    single_value  go to state 91


State 69

   50 ifblock: tIF tLPAR • condition tRPAR action-if tLBRACE body tRBRACE action-getIndex $@3
   52        | tIF tLPAR • condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex $@4
   54        | tIF tLPAR • condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE ifblock $@5

    tNOT  shift, and go to state 92
    tNB   shift, and go to state 32
    tID   shift, and go to state 93

    functionCall         go to state 34
    condition            go to state 94
    equality_expression  go to state 95
    compare              go to state 36
    add_sub              go to state 37
    div_mul              go to state 38
    single_value         go to state 39


State 70

   59 whileblock: tWHILE tLPAR • action-condition condition tRPAR action-while tLBRACE body tRBRACE $@6

    $default  reduce using rule 60 (action-condition)

    action-condition  go to state 96


State 71

   62 printblock: tPRINT tLPAR • single_value tRPAR tSEMI

    tNB  shift, and go to state 32
    tID  shift, and go to state 33

    functionCall  go to state 34
    single_value  go to state 97


State 72

   32 return: tRETURN add_sub • tSEMI
   77 add_sub: add_sub • tADD div_mul
   78        | add_sub • tSUB div_mul

    tADD   shift, and go to state 65
    tSUB   shift, and go to state 66
    tSEMI  shift, and go to state 98


State 73

   47 assignment_list: tID tASSIGN • add_sub tSEMI
   48                | tID tASSIGN • add_sub tCOMMA assignment_list

    tNB  shift, and go to state 32
    tID  shift, and go to state 33

    functionCall  go to state 34
    add_sub       go to state 99
    div_mul       go to state 38
    single_value  go to state 39


State 74

   10 main_function: function_type tMAIN $@2 tLPAR parameter_list tRPAR tLBRACE body tRBRACE •

    $default  reduce using rule 10 (main_function)


State 75

   34 instruction_list: instruction_list instruction •

    $default  reduce using rule 34 (instruction_list)


State 76

   30 body: declaration_list instruction_list •
   34 instruction_list: instruction_list • instruction

    tIF     shift, and go to state 40
    tWHILE  shift, and go to state 41
    tPRINT  shift, and go to state 42
    tID     shift, and go to state 45

    $default  reduce using rule 30 (body)

    instruction      go to state 75
    assignment_list  go to state 53
    ifblock          go to state 54
    whileblock       go to state 55
    printblock       go to state 56


State 77

   36 declaration_list: declaration_list declaration •

    $default  reduce using rule 36 (declaration_list)


State 78

   39 identifiers_list: tID •
   40                 | tID • tASSIGN add_sub

    tASSIGN  shift, and go to state 100

    $default  reduce using rule 39 (identifiers_list)


State 79

   37 declaration: declaration_type identifiers_list • tSEMI
   41 identifiers_list: identifiers_list • tCOMMA tID
   42                 | identifiers_list • tCOMMA tID tASSIGN add_sub

    tSEMI   shift, and go to state 101
    tCOMMA  shift, and go to state 102


State 80

    8 function: function_type tID tLPAR parameter_list tRPAR tLBRACE $@1 body tRBRACE •

    $default  reduce using rule 8 (function)


State 81

   20 functionCall: tID tLPAR action-call0 • action-call1 argument_list tRPAR

    $default  reduce using rule 22 (action-call1)

    action-call1  go to state 103


State 82

   70 equality_expression: equality_expression tNE compare •
   72 compare: compare • tLT add_sub
   73        | compare • tGT add_sub
   74        | compare • tLE add_sub
   75        | compare • tGE add_sub

    tLT  shift, and go to state 61
    tGT  shift, and go to state 62
    tGE  shift, and go to state 63
    tLE  shift, and go to state 64

    $default  reduce using rule 70 (equality_expression)


State 83

   69 equality_expression: equality_expression tEQ compare •
   72 compare: compare • tLT add_sub
   73        | compare • tGT add_sub
   74        | compare • tLE add_sub
   75        | compare • tGE add_sub

    tLT  shift, and go to state 61
    tGT  shift, and go to state 62
    tGE  shift, and go to state 63
    tLE  shift, and go to state 64

    $default  reduce using rule 69 (equality_expression)


State 84

   72 compare: compare tLT add_sub •
   77 add_sub: add_sub • tADD div_mul
   78        | add_sub • tSUB div_mul

    tADD  shift, and go to state 65
    tSUB  shift, and go to state 66

    $default  reduce using rule 72 (compare)


State 85

   73 compare: compare tGT add_sub •
   77 add_sub: add_sub • tADD div_mul
   78        | add_sub • tSUB div_mul

    tADD  shift, and go to state 65
    tSUB  shift, and go to state 66

    $default  reduce using rule 73 (compare)


State 86

   75 compare: compare tGE add_sub •
   77 add_sub: add_sub • tADD div_mul
   78        | add_sub • tSUB div_mul

    tADD  shift, and go to state 65
    tSUB  shift, and go to state 66

    $default  reduce using rule 75 (compare)


State 87

   74 compare: compare tLE add_sub •
   77 add_sub: add_sub • tADD div_mul
   78        | add_sub • tSUB div_mul

    tADD  shift, and go to state 65
    tSUB  shift, and go to state 66

    $default  reduce using rule 74 (compare)


State 88

   77 add_sub: add_sub tADD div_mul •
   80 div_mul: div_mul • tMUL single_value
   81        | div_mul • tDIV single_value

    tMUL  shift, and go to state 67
    tDIV  shift, and go to state 68

    $default  reduce using rule 77 (add_sub)


State 89

   78 add_sub: add_sub tSUB div_mul •
   80 div_mul: div_mul • tMUL single_value
   81        | div_mul • tDIV single_value

    tMUL  shift, and go to state 67
    tDIV  shift, and go to state 68

    $default  reduce using rule 78 (add_sub)


State 90

   80 div_mul: div_mul tMUL single_value •

    $default  reduce using rule 80 (div_mul)


State 91

   81 div_mul: div_mul tDIV single_value •

    $default  reduce using rule 81 (div_mul)


State 92

   67 condition: tNOT • condition

    tNOT  shift, and go to state 92
    tNB   shift, and go to state 32
    tID   shift, and go to state 93

    functionCall         go to state 34
    condition            go to state 104
    equality_expression  go to state 95
    compare              go to state 36
    add_sub              go to state 37
    div_mul              go to state 38
    single_value         go to state 39


State 93

   20 functionCall: tID • tLPAR action-call0 action-call1 argument_list tRPAR
   63 condition: tID •
   83 single_value: tID •

    tLPAR  shift, and go to state 58

    tAND      reduce using rule 63 (condition)
    tAND      [reduce using rule 83 (single_value)]
    tOR       reduce using rule 63 (condition)
    tOR       [reduce using rule 83 (single_value)]
    tRPAR     reduce using rule 63 (condition)
    tRPAR     [reduce using rule 83 (single_value)]
    $default  reduce using rule 83 (single_value)


State 94

   50 ifblock: tIF tLPAR condition • tRPAR action-if tLBRACE body tRBRACE action-getIndex $@3
   52        | tIF tLPAR condition • tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex $@4
   54        | tIF tLPAR condition • tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE ifblock $@5
   65 condition: condition • tAND condition
   66          | condition • tOR condition

    tAND   shift, and go to state 105
    tOR    shift, and go to state 106
    tRPAR  shift, and go to state 107


State 95

   64 condition: equality_expression •
   69 equality_expression: equality_expression • tEQ compare
   70                    | equality_expression • tNE compare

    tNE  shift, and go to state 59
    tEQ  shift, and go to state 60

    $default  reduce using rule 64 (condition)


State 96

   59 whileblock: tWHILE tLPAR action-condition • condition tRPAR action-while tLBRACE body tRBRACE $@6

    tNOT  shift, and go to state 92
    tNB   shift, and go to state 32
    tID   shift, and go to state 93

    functionCall         go to state 34
    condition            go to state 108
    equality_expression  go to state 95
    compare              go to state 36
    add_sub              go to state 37
    div_mul              go to state 38
    single_value         go to state 39


State 97

   62 printblock: tPRINT tLPAR single_value • tRPAR tSEMI

    tRPAR  shift, and go to state 109


State 98

   32 return: tRETURN add_sub tSEMI •

    $default  reduce using rule 32 (return)


State 99

   47 assignment_list: tID tASSIGN add_sub • tSEMI
   48                | tID tASSIGN add_sub • tCOMMA assignment_list
   77 add_sub: add_sub • tADD div_mul
   78        | add_sub • tSUB div_mul

    tADD    shift, and go to state 65
    tSUB    shift, and go to state 66
    tSEMI   shift, and go to state 110
    tCOMMA  shift, and go to state 111


State 100

   40 identifiers_list: tID tASSIGN • add_sub

    tNB  shift, and go to state 32
    tID  shift, and go to state 33

    functionCall  go to state 34
    add_sub       go to state 112
    div_mul       go to state 38
    single_value  go to state 39


State 101

   37 declaration: declaration_type identifiers_list tSEMI •

    $default  reduce using rule 37 (declaration)


State 102

   41 identifiers_list: identifiers_list tCOMMA • tID
   42                 | identifiers_list tCOMMA • tID tASSIGN add_sub

    tID  shift, and go to state 113


State 103

   20 functionCall: tID tLPAR action-call0 action-call1 • argument_list tRPAR

    tNB  shift, and go to state 32
    tID  shift, and go to state 33

    tNB       [reduce using rule 23 (argument_list)]
    tID       [reduce using rule 23 (argument_list)]
    $default  reduce using rule 23 (argument_list)

    functionCall   go to state 34
    argument_list  go to state 114
    argument       go to state 115
    add_sub        go to state 116
    div_mul        go to state 38
    single_value   go to state 39


State 104

   65 condition: condition • tAND condition
   66          | condition • tOR condition
   67          | tNOT condition •

    tAND  shift, and go to state 105
    tOR   shift, and go to state 106

    tAND      [reduce using rule 67 (condition)]
    tOR       [reduce using rule 67 (condition)]
    $default  reduce using rule 67 (condition)


State 105

   65 condition: condition tAND • condition

    tNOT  shift, and go to state 92
    tNB   shift, and go to state 32
    tID   shift, and go to state 93

    functionCall         go to state 34
    condition            go to state 117
    equality_expression  go to state 95
    compare              go to state 36
    add_sub              go to state 37
    div_mul              go to state 38
    single_value         go to state 39


State 106

   66 condition: condition tOR • condition

    tNOT  shift, and go to state 92
    tNB   shift, and go to state 32
    tID   shift, and go to state 93

    functionCall         go to state 34
    condition            go to state 118
    equality_expression  go to state 95
    compare              go to state 36
    add_sub              go to state 37
    div_mul              go to state 38
    single_value         go to state 39


State 107

   50 ifblock: tIF tLPAR condition tRPAR • action-if tLBRACE body tRBRACE action-getIndex $@3
   52        | tIF tLPAR condition tRPAR • action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex $@4
   54        | tIF tLPAR condition tRPAR • action-if tLBRACE body tRBRACE action-getIndex tELSE ifblock $@5

    $default  reduce using rule 55 (action-if)

    action-if  go to state 119


State 108

   59 whileblock: tWHILE tLPAR action-condition condition • tRPAR action-while tLBRACE body tRBRACE $@6
   65 condition: condition • tAND condition
   66          | condition • tOR condition

    tAND   shift, and go to state 105
    tOR    shift, and go to state 106
    tRPAR  shift, and go to state 120


State 109

   62 printblock: tPRINT tLPAR single_value tRPAR • tSEMI

    tSEMI  shift, and go to state 121


State 110

   47 assignment_list: tID tASSIGN add_sub tSEMI •

    $default  reduce using rule 47 (assignment_list)


State 111

   48 assignment_list: tID tASSIGN add_sub tCOMMA • assignment_list

    tID  shift, and go to state 45

    assignment_list  go to state 122


State 112

   40 identifiers_list: tID tASSIGN add_sub •
   77 add_sub: add_sub • tADD div_mul
   78        | add_sub • tSUB div_mul

    tADD  shift, and go to state 65
    tSUB  shift, and go to state 66

    $default  reduce using rule 40 (identifiers_list)


State 113

   41 identifiers_list: identifiers_list tCOMMA tID •
   42                 | identifiers_list tCOMMA tID • tASSIGN add_sub

    tASSIGN  shift, and go to state 123

    $default  reduce using rule 41 (identifiers_list)


State 114

   20 functionCall: tID tLPAR action-call0 action-call1 argument_list • tRPAR
   25 argument_list: argument_list • argument

    tRPAR  shift, and go to state 124
    tNB    shift, and go to state 32
    tID    shift, and go to state 33

    functionCall  go to state 34
    argument      go to state 125
    add_sub       go to state 116
    div_mul       go to state 38
    single_value  go to state 39


State 115

   24 argument_list: argument •

    $default  reduce using rule 24 (argument_list)


State 116

   26 argument: add_sub •
   77 add_sub: add_sub • tADD div_mul
   78        | add_sub • tSUB div_mul

    tADD  shift, and go to state 65
    tSUB  shift, and go to state 66

    $default  reduce using rule 26 (argument)


State 117

   65 condition: condition • tAND condition
   65          | condition tAND condition •
   66          | condition • tOR condition

    $default  reduce using rule 65 (condition)


State 118

   65 condition: condition • tAND condition
   66          | condition • tOR condition
   66          | condition tOR condition •

    $default  reduce using rule 66 (condition)


State 119

   50 ifblock: tIF tLPAR condition tRPAR action-if • tLBRACE body tRBRACE action-getIndex $@3
   52        | tIF tLPAR condition tRPAR action-if • tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex $@4
   54        | tIF tLPAR condition tRPAR action-if • tLBRACE body tRBRACE action-getIndex tELSE ifblock $@5

    tLBRACE  shift, and go to state 126


State 120

   59 whileblock: tWHILE tLPAR action-condition condition tRPAR • action-while tLBRACE body tRBRACE $@6

    $default  reduce using rule 61 (action-while)

    action-while  go to state 127


State 121

   62 printblock: tPRINT tLPAR single_value tRPAR tSEMI •

    $default  reduce using rule 62 (printblock)


State 122

   48 assignment_list: tID tASSIGN add_sub tCOMMA assignment_list •

    $default  reduce using rule 48 (assignment_list)


State 123

   42 identifiers_list: identifiers_list tCOMMA tID tASSIGN • add_sub

    tNB  shift, and go to state 32
    tID  shift, and go to state 33

    functionCall  go to state 34
    add_sub       go to state 128
    div_mul       go to state 38
    single_value  go to state 39


State 124

   20 functionCall: tID tLPAR action-call0 action-call1 argument_list tRPAR •

    $default  reduce using rule 20 (functionCall)


State 125

   25 argument_list: argument_list argument •

    $default  reduce using rule 25 (argument_list)


State 126

   50 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE • body tRBRACE action-getIndex $@3
   52        | tIF tLPAR condition tRPAR action-if tLBRACE • body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex $@4
   54        | tIF tLPAR condition tRPAR action-if tLBRACE • body tRBRACE action-getIndex tELSE ifblock $@5

    tIF      shift, and go to state 40
    tWHILE   shift, and go to state 41
    tPRINT   shift, and go to state 42
    tRETURN  shift, and go to state 43
    tINT     shift, and go to state 44
    tID      shift, and go to state 45

    $default  reduce using rule 27 (body)

    body              go to state 129
    return            go to state 47
    instruction_list  go to state 48
    declaration_list  go to state 49
    declaration       go to state 50
    declaration_type  go to state 51
    instruction       go to state 52
    assignment_list   go to state 53
    ifblock           go to state 54
    whileblock        go to state 55
    printblock        go to state 56


State 127

   59 whileblock: tWHILE tLPAR action-condition condition tRPAR action-while • tLBRACE body tRBRACE $@6

    tLBRACE  shift, and go to state 130


State 128

   42 identifiers_list: identifiers_list tCOMMA tID tASSIGN add_sub •
   77 add_sub: add_sub • tADD div_mul
   78        | add_sub • tSUB div_mul

    tADD  shift, and go to state 65
    tSUB  shift, and go to state 66

    $default  reduce using rule 42 (identifiers_list)


State 129

   50 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body • tRBRACE action-getIndex $@3
   52        | tIF tLPAR condition tRPAR action-if tLBRACE body • tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex $@4
   54        | tIF tLPAR condition tRPAR action-if tLBRACE body • tRBRACE action-getIndex tELSE ifblock $@5

    tRBRACE  shift, and go to state 131


State 130

   59 whileblock: tWHILE tLPAR action-condition condition tRPAR action-while tLBRACE • body tRBRACE $@6

    tIF      shift, and go to state 40
    tWHILE   shift, and go to state 41
    tPRINT   shift, and go to state 42
    tRETURN  shift, and go to state 43
    tINT     shift, and go to state 44
    tID      shift, and go to state 45

    $default  reduce using rule 27 (body)

    body              go to state 132
    return            go to state 47
    instruction_list  go to state 48
    declaration_list  go to state 49
    declaration       go to state 50
    declaration_type  go to state 51
    instruction       go to state 52
    assignment_list   go to state 53
    ifblock           go to state 54
    whileblock        go to state 55
    printblock        go to state 56


State 131

   50 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE • action-getIndex $@3
   52        | tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE • action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex $@4
   54        | tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE • action-getIndex tELSE ifblock $@5

    $default  reduce using rule 57 (action-getIndex)

    action-getIndex  go to state 133


State 132

   59 whileblock: tWHILE tLPAR action-condition condition tRPAR action-while tLBRACE body • tRBRACE $@6

    tRBRACE  shift, and go to state 134


State 133

   50 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex • $@3
   52        | tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex • tELSE action-else tLBRACE body tRBRACE action-getIndex $@4
   54        | tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex • tELSE ifblock $@5

    tELSE  shift, and go to state 135

    $default  reduce using rule 49 ($@3)

    $@3  go to state 136


State 134

   59 whileblock: tWHILE tLPAR action-condition condition tRPAR action-while tLBRACE body tRBRACE • $@6

    $default  reduce using rule 58 ($@6)

    $@6  go to state 137


State 135

   52 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE • action-else tLBRACE body tRBRACE action-getIndex $@4
   54        | tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE • ifblock $@5

    tIF  shift, and go to state 40

    $default  reduce using rule 56 (action-else)

    ifblock      go to state 138
    action-else  go to state 139


State 136

   50 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex $@3 •

    $default  reduce using rule 50 (ifblock)


State 137

   59 whileblock: tWHILE tLPAR action-condition condition tRPAR action-while tLBRACE body tRBRACE $@6 •

    $default  reduce using rule 59 (whileblock)


State 138

   54 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE ifblock • $@5

    $default  reduce using rule 53 ($@5)

    $@5  go to state 140


State 139

   52 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else • tLBRACE body tRBRACE action-getIndex $@4

    tLBRACE  shift, and go to state 141


State 140

   54 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE ifblock $@5 •

    $default  reduce using rule 54 (ifblock)


State 141

   52 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE • body tRBRACE action-getIndex $@4

    tIF      shift, and go to state 40
    tWHILE   shift, and go to state 41
    tPRINT   shift, and go to state 42
    tRETURN  shift, and go to state 43
    tINT     shift, and go to state 44
    tID      shift, and go to state 45

    $default  reduce using rule 27 (body)

    body              go to state 142
    return            go to state 47
    instruction_list  go to state 48
    declaration_list  go to state 49
    declaration       go to state 50
    declaration_type  go to state 51
    instruction       go to state 52
    assignment_list   go to state 53
    ifblock           go to state 54
    whileblock        go to state 55
    printblock        go to state 56


State 142

   52 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body • tRBRACE action-getIndex $@4

    tRBRACE  shift, and go to state 143


State 143

   52 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE • action-getIndex $@4

    $default  reduce using rule 57 (action-getIndex)

    action-getIndex  go to state 144


State 144

   52 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex • $@4

    $default  reduce using rule 51 ($@4)

    $@4  go to state 145


State 145

   52 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex $@4 •

    $default  reduce using rule 52 (ifblock)
