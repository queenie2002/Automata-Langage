Terminals unused in grammar

    tRETURN
    tCONST
    tERROR


State 81 conflicts: 2 shift/reduce
State 93 conflicts: 2 shift/reduce
State 94 conflicts: 2 shift/reduce


Grammar

    0 $accept: program $end

    1 program: ε
    2        | main_function

    3 main_function: function_type tMAIN tLPAR parameter_list tRPAR tLBRACE body tRBRACE

    4 function_type: tVOID
    5              | tINT

    6 parameter_list: ε
    7               | tVOID
    8               | parameter
    9               | parameter_list tCOMMA parameter

   10 parameter: parameter_type tID
   11          | parameter_type tID tASSIGN equality_expression

   12 parameter_type: tINT

   13 body: ε
   14     | declaration_list
   15     | instruction_list
   16     | declaration_list instruction_list

   17 instruction_list: instruction
   18                 | instruction_list instruction

   19 declaration_list: declaration
   20                 | declaration_list declaration

   21 declaration: declaration_type identifiers_list tSEMI

   22 declaration_type: tINT

   23 identifiers_list: tID
   24                 | tID tASSIGN add_sub
   25                 | identifiers_list tCOMMA tID
   26                 | identifiers_list tCOMMA tID tASSIGN add_sub

   27 instruction: assignment_list
   28            | ifblock
   29            | whileblock
   30            | printblock

   31 assignment_list: tID tASSIGN add_sub tSEMI
   32                | tID tASSIGN add_sub tCOMMA assignment_list

   33 ifblock: tIF tLPAR condition tRPAR tLBRACE body tRBRACE
   34        | tIF tLPAR condition tRPAR tLBRACE body tRBRACE tELSE tLBRACE body tRBRACE
   35        | tIF tLPAR condition tRPAR tLBRACE body tRBRACE tELSE ifblock

   36 whileblock: tWHILE tLPAR condition tRPAR tLBRACE body tRBRACE

   37 printblock: tPRINT tLPAR tID tRPAR tSEMI

   38 condition: tLPAR equality_expression tRPAR
   39          | condition tAND condition
   40          | condition tOR condition
   41          | tNOT condition

   42 equality_expression: compare
   43                    | equality_expression tEQ compare
   44                    | equality_expression tNE compare

   45 compare: add_sub
   46        | compare tLT add_sub
   47        | compare tGT add_sub
   48        | compare tLE add_sub
   49        | compare tGE add_sub

   50 add_sub: div_mul
   51        | add_sub tADD div_mul
   52        | add_sub tSUB div_mul

   53 div_mul: single_value
   54        | div_mul tMUL single_value
   55        | div_mul tDIV single_value

   56 single_value: tID
   57             | tNB


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    tADD (258) 51
    tSUB (259) 52
    tMUL (260) 54
    tDIV (261) 55
    tLT (262) 46
    tGT (263) 47
    tNE (264) 44
    tEQ (265) 43
    tGE (266) 49
    tLE (267) 48
    tASSIGN (268) 11 24 26 31 32
    tAND (269) 39
    tOR (270) 40
    tNOT (271) 41
    tLBRACE (272) 3 33 34 35 36
    tRBRACE (273) 3 33 34 35 36
    tLPAR (274) 3 33 34 35 36 37 38
    tRPAR (275) 3 33 34 35 36 37 38
    tSEMI (276) 21 31 37
    tCOMMA (277) 9 25 26 32
    tIF (278) 33 34 35
    tELSE (279) 34 35
    tWHILE (280) 36
    tPRINT (281) 37
    tRETURN (282)
    tINT (283) 5 12 22
    tVOID (284) 4 7
    tMAIN (285) 3
    tCONST (286)
    tERROR (287)
    tNB <nb> (288) 57
    tID <var> (289) 10 11 23 24 25 26 31 32 37 56


Nonterminals, with rules where they appear

    $accept (35)
        on left: 0
    program (36)
        on left: 1 2
        on right: 0
    main_function (37)
        on left: 3
        on right: 2
    function_type (38)
        on left: 4 5
        on right: 3
    parameter_list (39)
        on left: 6 7 8 9
        on right: 3 9
    parameter (40)
        on left: 10 11
        on right: 8 9
    parameter_type (41)
        on left: 12
        on right: 10 11
    body (42)
        on left: 13 14 15 16
        on right: 3 33 34 35 36
    instruction_list (43)
        on left: 17 18
        on right: 15 16 18
    declaration_list (44)
        on left: 19 20
        on right: 14 16 20
    declaration (45)
        on left: 21
        on right: 19 20
    declaration_type (46)
        on left: 22
        on right: 21
    identifiers_list (47)
        on left: 23 24 25 26
        on right: 21 25 26
    instruction (48)
        on left: 27 28 29 30
        on right: 17 18
    assignment_list (49)
        on left: 31 32
        on right: 27 32
    ifblock (50)
        on left: 33 34 35
        on right: 28 35
    whileblock (51)
        on left: 36
        on right: 29
    printblock (52)
        on left: 37
        on right: 30
    condition (53)
        on left: 38 39 40 41
        on right: 33 34 35 36 39 40 41
    equality_expression (54)
        on left: 42 43 44
        on right: 11 38 43 44
    compare (55)
        on left: 45 46 47 48 49
        on right: 42 43 44 46 47 48 49
    add_sub <nb> (56)
        on left: 50 51 52
        on right: 24 26 31 32 45 46 47 48 49 51 52
    div_mul <nb> (57)
        on left: 53 54 55
        on right: 50 51 52 54 55
    single_value <nb> (58)
        on left: 56 57
        on right: 53 54 55


State 0

    0 $accept: • program $end

    tINT   shift, and go to state 1
    tVOID  shift, and go to state 2

    $default  reduce using rule 1 (program)

    program        go to state 3
    main_function  go to state 4
    function_type  go to state 5


State 1

    5 function_type: tINT •

    $default  reduce using rule 5 (function_type)


State 2

    4 function_type: tVOID •

    $default  reduce using rule 4 (function_type)


State 3

    0 $accept: program • $end

    $end  shift, and go to state 6


State 4

    2 program: main_function •

    $default  reduce using rule 2 (program)


State 5

    3 main_function: function_type • tMAIN tLPAR parameter_list tRPAR tLBRACE body tRBRACE

    tMAIN  shift, and go to state 7


State 6

    0 $accept: program $end •

    $default  accept


State 7

    3 main_function: function_type tMAIN • tLPAR parameter_list tRPAR tLBRACE body tRBRACE

    tLPAR  shift, and go to state 8


State 8

    3 main_function: function_type tMAIN tLPAR • parameter_list tRPAR tLBRACE body tRBRACE

    tINT   shift, and go to state 9
    tVOID  shift, and go to state 10

    $default  reduce using rule 6 (parameter_list)

    parameter_list  go to state 11
    parameter       go to state 12
    parameter_type  go to state 13


State 9

   12 parameter_type: tINT •

    $default  reduce using rule 12 (parameter_type)


State 10

    7 parameter_list: tVOID •

    $default  reduce using rule 7 (parameter_list)


State 11

    3 main_function: function_type tMAIN tLPAR parameter_list • tRPAR tLBRACE body tRBRACE
    9 parameter_list: parameter_list • tCOMMA parameter

    tRPAR   shift, and go to state 14
    tCOMMA  shift, and go to state 15


State 12

    8 parameter_list: parameter •

    $default  reduce using rule 8 (parameter_list)


State 13

   10 parameter: parameter_type • tID
   11          | parameter_type • tID tASSIGN equality_expression

    tID  shift, and go to state 16


State 14

    3 main_function: function_type tMAIN tLPAR parameter_list tRPAR • tLBRACE body tRBRACE

    tLBRACE  shift, and go to state 17


State 15

    9 parameter_list: parameter_list tCOMMA • parameter

    tINT  shift, and go to state 9

    parameter       go to state 18
    parameter_type  go to state 13


State 16

   10 parameter: parameter_type tID •
   11          | parameter_type tID • tASSIGN equality_expression

    tASSIGN  shift, and go to state 19

    $default  reduce using rule 10 (parameter)


State 17

    3 main_function: function_type tMAIN tLPAR parameter_list tRPAR tLBRACE • body tRBRACE

    tIF     shift, and go to state 20
    tWHILE  shift, and go to state 21
    tPRINT  shift, and go to state 22
    tINT    shift, and go to state 23
    tID     shift, and go to state 24

    $default  reduce using rule 13 (body)

    body              go to state 25
    instruction_list  go to state 26
    declaration_list  go to state 27
    declaration       go to state 28
    declaration_type  go to state 29
    instruction       go to state 30
    assignment_list   go to state 31
    ifblock           go to state 32
    whileblock        go to state 33
    printblock        go to state 34


State 18

    9 parameter_list: parameter_list tCOMMA parameter •

    $default  reduce using rule 9 (parameter_list)


State 19

   11 parameter: parameter_type tID tASSIGN • equality_expression

    tNB  shift, and go to state 35
    tID  shift, and go to state 36

    equality_expression  go to state 37
    compare              go to state 38
    add_sub              go to state 39
    div_mul              go to state 40
    single_value         go to state 41


State 20

   33 ifblock: tIF • tLPAR condition tRPAR tLBRACE body tRBRACE
   34        | tIF • tLPAR condition tRPAR tLBRACE body tRBRACE tELSE tLBRACE body tRBRACE
   35        | tIF • tLPAR condition tRPAR tLBRACE body tRBRACE tELSE ifblock

    tLPAR  shift, and go to state 42


State 21

   36 whileblock: tWHILE • tLPAR condition tRPAR tLBRACE body tRBRACE

    tLPAR  shift, and go to state 43


State 22

   37 printblock: tPRINT • tLPAR tID tRPAR tSEMI

    tLPAR  shift, and go to state 44


State 23

   22 declaration_type: tINT •

    $default  reduce using rule 22 (declaration_type)


State 24

   31 assignment_list: tID • tASSIGN add_sub tSEMI
   32                | tID • tASSIGN add_sub tCOMMA assignment_list

    tASSIGN  shift, and go to state 45


State 25

    3 main_function: function_type tMAIN tLPAR parameter_list tRPAR tLBRACE body • tRBRACE

    tRBRACE  shift, and go to state 46


State 26

   15 body: instruction_list •
   18 instruction_list: instruction_list • instruction

    tIF     shift, and go to state 20
    tWHILE  shift, and go to state 21
    tPRINT  shift, and go to state 22
    tID     shift, and go to state 24

    $default  reduce using rule 15 (body)

    instruction      go to state 47
    assignment_list  go to state 31
    ifblock          go to state 32
    whileblock       go to state 33
    printblock       go to state 34


State 27

   14 body: declaration_list •
   16     | declaration_list • instruction_list
   20 declaration_list: declaration_list • declaration

    tIF     shift, and go to state 20
    tWHILE  shift, and go to state 21
    tPRINT  shift, and go to state 22
    tINT    shift, and go to state 23
    tID     shift, and go to state 24

    $default  reduce using rule 14 (body)

    instruction_list  go to state 48
    declaration       go to state 49
    declaration_type  go to state 29
    instruction       go to state 30
    assignment_list   go to state 31
    ifblock           go to state 32
    whileblock        go to state 33
    printblock        go to state 34


State 28

   19 declaration_list: declaration •

    $default  reduce using rule 19 (declaration_list)


State 29

   21 declaration: declaration_type • identifiers_list tSEMI

    tID  shift, and go to state 50

    identifiers_list  go to state 51


State 30

   17 instruction_list: instruction •

    $default  reduce using rule 17 (instruction_list)


State 31

   27 instruction: assignment_list •

    $default  reduce using rule 27 (instruction)


State 32

   28 instruction: ifblock •

    $default  reduce using rule 28 (instruction)


State 33

   29 instruction: whileblock •

    $default  reduce using rule 29 (instruction)


State 34

   30 instruction: printblock •

    $default  reduce using rule 30 (instruction)


State 35

   57 single_value: tNB •

    $default  reduce using rule 57 (single_value)


State 36

   56 single_value: tID •

    $default  reduce using rule 56 (single_value)


State 37

   11 parameter: parameter_type tID tASSIGN equality_expression •
   43 equality_expression: equality_expression • tEQ compare
   44                    | equality_expression • tNE compare

    tNE  shift, and go to state 52
    tEQ  shift, and go to state 53

    $default  reduce using rule 11 (parameter)


State 38

   42 equality_expression: compare •
   46 compare: compare • tLT add_sub
   47        | compare • tGT add_sub
   48        | compare • tLE add_sub
   49        | compare • tGE add_sub

    tLT  shift, and go to state 54
    tGT  shift, and go to state 55
    tGE  shift, and go to state 56
    tLE  shift, and go to state 57

    $default  reduce using rule 42 (equality_expression)


State 39

   45 compare: add_sub •
   51 add_sub: add_sub • tADD div_mul
   52        | add_sub • tSUB div_mul

    tADD  shift, and go to state 58
    tSUB  shift, and go to state 59

    $default  reduce using rule 45 (compare)


State 40

   50 add_sub: div_mul •
   54 div_mul: div_mul • tMUL single_value
   55        | div_mul • tDIV single_value

    tMUL  shift, and go to state 60
    tDIV  shift, and go to state 61

    $default  reduce using rule 50 (add_sub)


State 41

   53 div_mul: single_value •

    $default  reduce using rule 53 (div_mul)


State 42

   33 ifblock: tIF tLPAR • condition tRPAR tLBRACE body tRBRACE
   34        | tIF tLPAR • condition tRPAR tLBRACE body tRBRACE tELSE tLBRACE body tRBRACE
   35        | tIF tLPAR • condition tRPAR tLBRACE body tRBRACE tELSE ifblock

    tNOT   shift, and go to state 62
    tLPAR  shift, and go to state 63

    condition  go to state 64


State 43

   36 whileblock: tWHILE tLPAR • condition tRPAR tLBRACE body tRBRACE

    tNOT   shift, and go to state 62
    tLPAR  shift, and go to state 63

    condition  go to state 65


State 44

   37 printblock: tPRINT tLPAR • tID tRPAR tSEMI

    tID  shift, and go to state 66


State 45

   31 assignment_list: tID tASSIGN • add_sub tSEMI
   32                | tID tASSIGN • add_sub tCOMMA assignment_list

    tNB  shift, and go to state 35
    tID  shift, and go to state 36

    add_sub       go to state 67
    div_mul       go to state 40
    single_value  go to state 41


State 46

    3 main_function: function_type tMAIN tLPAR parameter_list tRPAR tLBRACE body tRBRACE •

    $default  reduce using rule 3 (main_function)


State 47

   18 instruction_list: instruction_list instruction •

    $default  reduce using rule 18 (instruction_list)


State 48

   16 body: declaration_list instruction_list •
   18 instruction_list: instruction_list • instruction

    tIF     shift, and go to state 20
    tWHILE  shift, and go to state 21
    tPRINT  shift, and go to state 22
    tID     shift, and go to state 24

    $default  reduce using rule 16 (body)

    instruction      go to state 47
    assignment_list  go to state 31
    ifblock          go to state 32
    whileblock       go to state 33
    printblock       go to state 34


State 49

   20 declaration_list: declaration_list declaration •

    $default  reduce using rule 20 (declaration_list)


State 50

   23 identifiers_list: tID •
   24                 | tID • tASSIGN add_sub

    tASSIGN  shift, and go to state 68

    $default  reduce using rule 23 (identifiers_list)


State 51

   21 declaration: declaration_type identifiers_list • tSEMI
   25 identifiers_list: identifiers_list • tCOMMA tID
   26                 | identifiers_list • tCOMMA tID tASSIGN add_sub

    tSEMI   shift, and go to state 69
    tCOMMA  shift, and go to state 70


State 52

   44 equality_expression: equality_expression tNE • compare

    tNB  shift, and go to state 35
    tID  shift, and go to state 36

    compare       go to state 71
    add_sub       go to state 39
    div_mul       go to state 40
    single_value  go to state 41


State 53

   43 equality_expression: equality_expression tEQ • compare

    tNB  shift, and go to state 35
    tID  shift, and go to state 36

    compare       go to state 72
    add_sub       go to state 39
    div_mul       go to state 40
    single_value  go to state 41


State 54

   46 compare: compare tLT • add_sub

    tNB  shift, and go to state 35
    tID  shift, and go to state 36

    add_sub       go to state 73
    div_mul       go to state 40
    single_value  go to state 41


State 55

   47 compare: compare tGT • add_sub

    tNB  shift, and go to state 35
    tID  shift, and go to state 36

    add_sub       go to state 74
    div_mul       go to state 40
    single_value  go to state 41


State 56

   49 compare: compare tGE • add_sub

    tNB  shift, and go to state 35
    tID  shift, and go to state 36

    add_sub       go to state 75
    div_mul       go to state 40
    single_value  go to state 41


State 57

   48 compare: compare tLE • add_sub

    tNB  shift, and go to state 35
    tID  shift, and go to state 36

    add_sub       go to state 76
    div_mul       go to state 40
    single_value  go to state 41


State 58

   51 add_sub: add_sub tADD • div_mul

    tNB  shift, and go to state 35
    tID  shift, and go to state 36

    div_mul       go to state 77
    single_value  go to state 41


State 59

   52 add_sub: add_sub tSUB • div_mul

    tNB  shift, and go to state 35
    tID  shift, and go to state 36

    div_mul       go to state 78
    single_value  go to state 41


State 60

   54 div_mul: div_mul tMUL • single_value

    tNB  shift, and go to state 35
    tID  shift, and go to state 36

    single_value  go to state 79


State 61

   55 div_mul: div_mul tDIV • single_value

    tNB  shift, and go to state 35
    tID  shift, and go to state 36

    single_value  go to state 80


State 62

   41 condition: tNOT • condition

    tNOT   shift, and go to state 62
    tLPAR  shift, and go to state 63

    condition  go to state 81


State 63

   38 condition: tLPAR • equality_expression tRPAR

    tNB  shift, and go to state 35
    tID  shift, and go to state 36

    equality_expression  go to state 82
    compare              go to state 38
    add_sub              go to state 39
    div_mul              go to state 40
    single_value         go to state 41


State 64

   33 ifblock: tIF tLPAR condition • tRPAR tLBRACE body tRBRACE
   34        | tIF tLPAR condition • tRPAR tLBRACE body tRBRACE tELSE tLBRACE body tRBRACE
   35        | tIF tLPAR condition • tRPAR tLBRACE body tRBRACE tELSE ifblock
   39 condition: condition • tAND condition
   40          | condition • tOR condition

    tAND   shift, and go to state 83
    tOR    shift, and go to state 84
    tRPAR  shift, and go to state 85


State 65

   36 whileblock: tWHILE tLPAR condition • tRPAR tLBRACE body tRBRACE
   39 condition: condition • tAND condition
   40          | condition • tOR condition

    tAND   shift, and go to state 83
    tOR    shift, and go to state 84
    tRPAR  shift, and go to state 86


State 66

   37 printblock: tPRINT tLPAR tID • tRPAR tSEMI

    tRPAR  shift, and go to state 87


State 67

   31 assignment_list: tID tASSIGN add_sub • tSEMI
   32                | tID tASSIGN add_sub • tCOMMA assignment_list
   51 add_sub: add_sub • tADD div_mul
   52        | add_sub • tSUB div_mul

    tADD    shift, and go to state 58
    tSUB    shift, and go to state 59
    tSEMI   shift, and go to state 88
    tCOMMA  shift, and go to state 89


State 68

   24 identifiers_list: tID tASSIGN • add_sub

    tNB  shift, and go to state 35
    tID  shift, and go to state 36

    add_sub       go to state 90
    div_mul       go to state 40
    single_value  go to state 41


State 69

   21 declaration: declaration_type identifiers_list tSEMI •

    $default  reduce using rule 21 (declaration)


State 70

   25 identifiers_list: identifiers_list tCOMMA • tID
   26                 | identifiers_list tCOMMA • tID tASSIGN add_sub

    tID  shift, and go to state 91


State 71

   44 equality_expression: equality_expression tNE compare •
   46 compare: compare • tLT add_sub
   47        | compare • tGT add_sub
   48        | compare • tLE add_sub
   49        | compare • tGE add_sub

    tLT  shift, and go to state 54
    tGT  shift, and go to state 55
    tGE  shift, and go to state 56
    tLE  shift, and go to state 57

    $default  reduce using rule 44 (equality_expression)


State 72

   43 equality_expression: equality_expression tEQ compare •
   46 compare: compare • tLT add_sub
   47        | compare • tGT add_sub
   48        | compare • tLE add_sub
   49        | compare • tGE add_sub

    tLT  shift, and go to state 54
    tGT  shift, and go to state 55
    tGE  shift, and go to state 56
    tLE  shift, and go to state 57

    $default  reduce using rule 43 (equality_expression)


State 73

   46 compare: compare tLT add_sub •
   51 add_sub: add_sub • tADD div_mul
   52        | add_sub • tSUB div_mul

    tADD  shift, and go to state 58
    tSUB  shift, and go to state 59

    $default  reduce using rule 46 (compare)


State 74

   47 compare: compare tGT add_sub •
   51 add_sub: add_sub • tADD div_mul
   52        | add_sub • tSUB div_mul

    tADD  shift, and go to state 58
    tSUB  shift, and go to state 59

    $default  reduce using rule 47 (compare)


State 75

   49 compare: compare tGE add_sub •
   51 add_sub: add_sub • tADD div_mul
   52        | add_sub • tSUB div_mul

    tADD  shift, and go to state 58
    tSUB  shift, and go to state 59

    $default  reduce using rule 49 (compare)


State 76

   48 compare: compare tLE add_sub •
   51 add_sub: add_sub • tADD div_mul
   52        | add_sub • tSUB div_mul

    tADD  shift, and go to state 58
    tSUB  shift, and go to state 59

    $default  reduce using rule 48 (compare)


State 77

   51 add_sub: add_sub tADD div_mul •
   54 div_mul: div_mul • tMUL single_value
   55        | div_mul • tDIV single_value

    tMUL  shift, and go to state 60
    tDIV  shift, and go to state 61

    $default  reduce using rule 51 (add_sub)


State 78

   52 add_sub: add_sub tSUB div_mul •
   54 div_mul: div_mul • tMUL single_value
   55        | div_mul • tDIV single_value

    tMUL  shift, and go to state 60
    tDIV  shift, and go to state 61

    $default  reduce using rule 52 (add_sub)


State 79

   54 div_mul: div_mul tMUL single_value •

    $default  reduce using rule 54 (div_mul)


State 80

   55 div_mul: div_mul tDIV single_value •

    $default  reduce using rule 55 (div_mul)


State 81

   39 condition: condition • tAND condition
   40          | condition • tOR condition
   41          | tNOT condition •

    tAND  shift, and go to state 83
    tOR   shift, and go to state 84

    tAND      [reduce using rule 41 (condition)]
    tOR       [reduce using rule 41 (condition)]
    $default  reduce using rule 41 (condition)


State 82

   38 condition: tLPAR equality_expression • tRPAR
   43 equality_expression: equality_expression • tEQ compare
   44                    | equality_expression • tNE compare

    tNE    shift, and go to state 52
    tEQ    shift, and go to state 53
    tRPAR  shift, and go to state 92


State 83

   39 condition: condition tAND • condition

    tNOT   shift, and go to state 62
    tLPAR  shift, and go to state 63

    condition  go to state 93


State 84

   40 condition: condition tOR • condition

    tNOT   shift, and go to state 62
    tLPAR  shift, and go to state 63

    condition  go to state 94


State 85

   33 ifblock: tIF tLPAR condition tRPAR • tLBRACE body tRBRACE
   34        | tIF tLPAR condition tRPAR • tLBRACE body tRBRACE tELSE tLBRACE body tRBRACE
   35        | tIF tLPAR condition tRPAR • tLBRACE body tRBRACE tELSE ifblock

    tLBRACE  shift, and go to state 95


State 86

   36 whileblock: tWHILE tLPAR condition tRPAR • tLBRACE body tRBRACE

    tLBRACE  shift, and go to state 96


State 87

   37 printblock: tPRINT tLPAR tID tRPAR • tSEMI

    tSEMI  shift, and go to state 97


State 88

   31 assignment_list: tID tASSIGN add_sub tSEMI •

    $default  reduce using rule 31 (assignment_list)


State 89

   32 assignment_list: tID tASSIGN add_sub tCOMMA • assignment_list

    tID  shift, and go to state 24

    assignment_list  go to state 98


State 90

   24 identifiers_list: tID tASSIGN add_sub •
   51 add_sub: add_sub • tADD div_mul
   52        | add_sub • tSUB div_mul

    tADD  shift, and go to state 58
    tSUB  shift, and go to state 59

    $default  reduce using rule 24 (identifiers_list)


State 91

   25 identifiers_list: identifiers_list tCOMMA tID •
   26                 | identifiers_list tCOMMA tID • tASSIGN add_sub

    tASSIGN  shift, and go to state 99

    $default  reduce using rule 25 (identifiers_list)


State 92

   38 condition: tLPAR equality_expression tRPAR •

    $default  reduce using rule 38 (condition)


State 93

   39 condition: condition • tAND condition
   39          | condition tAND condition •
   40          | condition • tOR condition

    tAND  shift, and go to state 83
    tOR   shift, and go to state 84

    tAND      [reduce using rule 39 (condition)]
    tOR       [reduce using rule 39 (condition)]
    $default  reduce using rule 39 (condition)


State 94

   39 condition: condition • tAND condition
   40          | condition • tOR condition
   40          | condition tOR condition •

    tAND  shift, and go to state 83
    tOR   shift, and go to state 84

    tAND      [reduce using rule 40 (condition)]
    tOR       [reduce using rule 40 (condition)]
    $default  reduce using rule 40 (condition)


State 95

   33 ifblock: tIF tLPAR condition tRPAR tLBRACE • body tRBRACE
   34        | tIF tLPAR condition tRPAR tLBRACE • body tRBRACE tELSE tLBRACE body tRBRACE
   35        | tIF tLPAR condition tRPAR tLBRACE • body tRBRACE tELSE ifblock

    tIF     shift, and go to state 20
    tWHILE  shift, and go to state 21
    tPRINT  shift, and go to state 22
    tINT    shift, and go to state 23
    tID     shift, and go to state 24

    $default  reduce using rule 13 (body)

    body              go to state 100
    instruction_list  go to state 26
    declaration_list  go to state 27
    declaration       go to state 28
    declaration_type  go to state 29
    instruction       go to state 30
    assignment_list   go to state 31
    ifblock           go to state 32
    whileblock        go to state 33
    printblock        go to state 34


State 96

   36 whileblock: tWHILE tLPAR condition tRPAR tLBRACE • body tRBRACE

    tIF     shift, and go to state 20
    tWHILE  shift, and go to state 21
    tPRINT  shift, and go to state 22
    tINT    shift, and go to state 23
    tID     shift, and go to state 24

    $default  reduce using rule 13 (body)

    body              go to state 101
    instruction_list  go to state 26
    declaration_list  go to state 27
    declaration       go to state 28
    declaration_type  go to state 29
    instruction       go to state 30
    assignment_list   go to state 31
    ifblock           go to state 32
    whileblock        go to state 33
    printblock        go to state 34


State 97

   37 printblock: tPRINT tLPAR tID tRPAR tSEMI •

    $default  reduce using rule 37 (printblock)


State 98

   32 assignment_list: tID tASSIGN add_sub tCOMMA assignment_list •

    $default  reduce using rule 32 (assignment_list)


State 99

   26 identifiers_list: identifiers_list tCOMMA tID tASSIGN • add_sub

    tNB  shift, and go to state 35
    tID  shift, and go to state 36

    add_sub       go to state 102
    div_mul       go to state 40
    single_value  go to state 41


State 100

   33 ifblock: tIF tLPAR condition tRPAR tLBRACE body • tRBRACE
   34        | tIF tLPAR condition tRPAR tLBRACE body • tRBRACE tELSE tLBRACE body tRBRACE
   35        | tIF tLPAR condition tRPAR tLBRACE body • tRBRACE tELSE ifblock

    tRBRACE  shift, and go to state 103


State 101

   36 whileblock: tWHILE tLPAR condition tRPAR tLBRACE body • tRBRACE

    tRBRACE  shift, and go to state 104


State 102

   26 identifiers_list: identifiers_list tCOMMA tID tASSIGN add_sub •
   51 add_sub: add_sub • tADD div_mul
   52        | add_sub • tSUB div_mul

    tADD  shift, and go to state 58
    tSUB  shift, and go to state 59

    $default  reduce using rule 26 (identifiers_list)


State 103

   33 ifblock: tIF tLPAR condition tRPAR tLBRACE body tRBRACE •
   34        | tIF tLPAR condition tRPAR tLBRACE body tRBRACE • tELSE tLBRACE body tRBRACE
   35        | tIF tLPAR condition tRPAR tLBRACE body tRBRACE • tELSE ifblock

    tELSE  shift, and go to state 105

    $default  reduce using rule 33 (ifblock)


State 104

   36 whileblock: tWHILE tLPAR condition tRPAR tLBRACE body tRBRACE •

    $default  reduce using rule 36 (whileblock)


State 105

   34 ifblock: tIF tLPAR condition tRPAR tLBRACE body tRBRACE tELSE • tLBRACE body tRBRACE
   35        | tIF tLPAR condition tRPAR tLBRACE body tRBRACE tELSE • ifblock

    tLBRACE  shift, and go to state 106
    tIF      shift, and go to state 20

    ifblock  go to state 107


State 106

   34 ifblock: tIF tLPAR condition tRPAR tLBRACE body tRBRACE tELSE tLBRACE • body tRBRACE

    tIF     shift, and go to state 20
    tWHILE  shift, and go to state 21
    tPRINT  shift, and go to state 22
    tINT    shift, and go to state 23
    tID     shift, and go to state 24

    $default  reduce using rule 13 (body)

    body              go to state 108
    instruction_list  go to state 26
    declaration_list  go to state 27
    declaration       go to state 28
    declaration_type  go to state 29
    instruction       go to state 30
    assignment_list   go to state 31
    ifblock           go to state 32
    whileblock        go to state 33
    printblock        go to state 34


State 107

   35 ifblock: tIF tLPAR condition tRPAR tLBRACE body tRBRACE tELSE ifblock •

    $default  reduce using rule 35 (ifblock)


State 108

   34 ifblock: tIF tLPAR condition tRPAR tLBRACE body tRBRACE tELSE tLBRACE body • tRBRACE

    tRBRACE  shift, and go to state 109


State 109

   34 ifblock: tIF tLPAR condition tRPAR tLBRACE body tRBRACE tELSE tLBRACE body tRBRACE •

    $default  reduce using rule 34 (ifblock)
