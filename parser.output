Terminals unused in grammar

    tCONST
    tERROR


State 80 conflicts: 2 shift/reduce
State 93 conflicts: 3 reduce/reduce
State 106 conflicts: 2 shift/reduce


Grammar

    0 $accept: program $end

    1 program: ε
    2        | main_function
    3        | function_list main_function

    4 function_list: function
    5              | function_list function

    6 $@1: ε

    7 function: function_type tID tLPAR parameter_list tRPAR tLBRACE $@1 body tRBRACE

    8 $@2: ε

    9 main_function: function_type tMAIN $@2 tLPAR parameter_list tRPAR tLBRACE body tRBRACE

   10 function_type: tVOID
   11              | tINT

   12 parameter_list: ε
   13               | tVOID
   14               | parameter
   15               | parameter_list tCOMMA parameter

   16 parameter: parameter_type tID
   17          | parameter_type tID tASSIGN equality_expression

   18 parameter_type: tINT

   19 functionCall: tID tLPAR action-call1 argument_list tRPAR

   20 action-call1: ε

   21 argument_list: ε
   22              | argument
   23              | argument_list argument

   24 argument: add_sub

   25 body: ε
   26     | declaration_list
   27     | instruction_list
   28     | declaration_list instruction_list
   29     | return

   30 return: tRETURN add_sub tSEMI

   31 instruction_list: instruction
   32                 | instruction_list instruction

   33 declaration_list: declaration
   34                 | declaration_list declaration

   35 declaration: declaration_type identifiers_list tSEMI

   36 declaration_type: tINT

   37 identifiers_list: tID
   38                 | tID tASSIGN add_sub
   39                 | identifiers_list tCOMMA tID
   40                 | identifiers_list tCOMMA tID tASSIGN add_sub

   41 instruction: assignment_list
   42            | ifblock
   43            | whileblock
   44            | printblock

   45 assignment_list: tID tASSIGN add_sub tSEMI
   46                | tID tASSIGN add_sub tCOMMA assignment_list

   47 $@3: ε

   48 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex $@3

   49 $@4: ε

   50 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex $@4

   51 $@5: ε

   52 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE ifblock $@5

   53 action-if: ε

   54 action-else: ε

   55 action-getIndex: ε

   56 $@6: ε

   57 whileblock: tWHILE tLPAR condition tRPAR action-while tLBRACE body tRBRACE $@6

   58 action-while: ε

   59 printblock: tPRINT tLPAR single_value tRPAR tSEMI

   60 condition: tID
   61          | equality_expression
   62          | condition tAND condition
   63          | condition tOR condition
   64          | tNOT condition

   65 equality_expression: compare
   66                    | equality_expression tEQ compare
   67                    | equality_expression tNE compare

   68 compare: add_sub
   69        | compare tLT add_sub
   70        | compare tGT add_sub
   71        | compare tLE add_sub
   72        | compare tGE add_sub

   73 add_sub: functionCall
   74        | div_mul
   75        | add_sub tADD div_mul
   76        | add_sub tSUB div_mul

   77 div_mul: single_value
   78        | div_mul tMUL single_value
   79        | div_mul tDIV single_value

   80 single_value: tID
   81             | tNB


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    tADD (258) 75
    tSUB (259) 76
    tMUL (260) 78
    tDIV (261) 79
    tLT (262) 69
    tGT (263) 70
    tNE (264) 67
    tEQ (265) 66
    tGE (266) 72
    tLE (267) 71
    tASSIGN (268) 17 38 40 45 46
    tAND (269) 62
    tOR (270) 63
    tNOT (271) 64
    tLBRACE (272) 7 9 48 50 52 57
    tRBRACE (273) 7 9 48 50 52 57
    tLPAR (274) 7 9 19 48 50 52 57 59
    tRPAR (275) 7 9 19 48 50 52 57 59
    tSEMI (276) 30 35 45 59
    tCOMMA (277) 15 39 40 46
    tIF (278) 48 50 52
    tELSE (279) 50 52
    tWHILE (280) 57
    tPRINT (281) 59
    tRETURN (282) 30
    tINT (283) 11 18 36
    tVOID (284) 10 13
    tMAIN (285) 9
    tCONST (286)
    tERROR (287)
    tNB <nb> (288) 81
    tID <var> (289) 7 16 17 19 37 38 39 40 45 46 60 80


Nonterminals, with rules where they appear

    $accept (35)
        on left: 0
    program (36)
        on left: 1 2 3
        on right: 0
    function_list (37)
        on left: 4 5
        on right: 3 5
    function (38)
        on left: 7
        on right: 4 5
    $@1 (39)
        on left: 6
        on right: 7
    main_function (40)
        on left: 9
        on right: 2 3
    $@2 (41)
        on left: 8
        on right: 9
    function_type (42)
        on left: 10 11
        on right: 7 9
    parameter_list (43)
        on left: 12 13 14 15
        on right: 7 9 15
    parameter (44)
        on left: 16 17
        on right: 14 15
    parameter_type (45)
        on left: 18
        on right: 16 17
    functionCall <nb> (46)
        on left: 19
        on right: 73
    action-call1 <nb> (47)
        on left: 20
        on right: 19
    argument_list (48)
        on left: 21 22 23
        on right: 19 23
    argument (49)
        on left: 24
        on right: 22 23
    body (50)
        on left: 25 26 27 28 29
        on right: 7 9 48 50 52 57
    return (51)
        on left: 30
        on right: 29
    instruction_list (52)
        on left: 31 32
        on right: 27 28 32
    declaration_list (53)
        on left: 33 34
        on right: 26 28 34
    declaration (54)
        on left: 35
        on right: 33 34
    declaration_type (55)
        on left: 36
        on right: 35
    identifiers_list (56)
        on left: 37 38 39 40
        on right: 35 39 40
    instruction (57)
        on left: 41 42 43 44
        on right: 31 32
    assignment_list (58)
        on left: 45 46
        on right: 41 46
    ifblock (59)
        on left: 48 50 52
        on right: 42 52
    $@3 (60)
        on left: 47
        on right: 48
    $@4 (61)
        on left: 49
        on right: 50
    $@5 (62)
        on left: 51
        on right: 52
    action-if <nb> (63)
        on left: 53
        on right: 48 50 52
    action-else <nb> (64)
        on left: 54
        on right: 50
    action-getIndex <nb> (65)
        on left: 55
        on right: 48 50 52
    whileblock (66)
        on left: 57
        on right: 43
    $@6 (67)
        on left: 56
        on right: 57
    action-while <nb> (68)
        on left: 58
        on right: 57
    printblock (69)
        on left: 59
        on right: 44
    condition <nb> (70)
        on left: 60 61 62 63 64
        on right: 48 50 52 57 62 63 64
    equality_expression <nb> (71)
        on left: 65 66 67
        on right: 17 61 66 67
    compare <nb> (72)
        on left: 68 69 70 71 72
        on right: 65 66 67 69 70 71 72
    add_sub <nb> (73)
        on left: 73 74 75 76
        on right: 24 30 38 40 45 46 68 69 70 71 72 75 76
    div_mul <nb> (74)
        on left: 77 78 79
        on right: 74 75 76 78 79
    single_value <nb> (75)
        on left: 80 81
        on right: 59 77 78 79


State 0

    0 $accept: • program $end

    tINT   shift, and go to state 1
    tVOID  shift, and go to state 2

    $default  reduce using rule 1 (program)

    program        go to state 3
    function_list  go to state 4
    function       go to state 5
    main_function  go to state 6
    function_type  go to state 7


State 1

   11 function_type: tINT •

    $default  reduce using rule 11 (function_type)


State 2

   10 function_type: tVOID •

    $default  reduce using rule 10 (function_type)


State 3

    0 $accept: program • $end

    $end  shift, and go to state 8


State 4

    3 program: function_list • main_function
    5 function_list: function_list • function

    tINT   shift, and go to state 1
    tVOID  shift, and go to state 2

    function       go to state 9
    main_function  go to state 10
    function_type  go to state 7


State 5

    4 function_list: function •

    $default  reduce using rule 4 (function_list)


State 6

    2 program: main_function •

    $default  reduce using rule 2 (program)


State 7

    7 function: function_type • tID tLPAR parameter_list tRPAR tLBRACE $@1 body tRBRACE
    9 main_function: function_type • tMAIN $@2 tLPAR parameter_list tRPAR tLBRACE body tRBRACE

    tMAIN  shift, and go to state 11
    tID    shift, and go to state 12


State 8

    0 $accept: program $end •

    $default  accept


State 9

    5 function_list: function_list function •

    $default  reduce using rule 5 (function_list)


State 10

    3 program: function_list main_function •

    $default  reduce using rule 3 (program)


State 11

    9 main_function: function_type tMAIN • $@2 tLPAR parameter_list tRPAR tLBRACE body tRBRACE

    $default  reduce using rule 8 ($@2)

    $@2  go to state 13


State 12

    7 function: function_type tID • tLPAR parameter_list tRPAR tLBRACE $@1 body tRBRACE

    tLPAR  shift, and go to state 14


State 13

    9 main_function: function_type tMAIN $@2 • tLPAR parameter_list tRPAR tLBRACE body tRBRACE

    tLPAR  shift, and go to state 15


State 14

    7 function: function_type tID tLPAR • parameter_list tRPAR tLBRACE $@1 body tRBRACE

    tINT   shift, and go to state 16
    tVOID  shift, and go to state 17

    $default  reduce using rule 12 (parameter_list)

    parameter_list  go to state 18
    parameter       go to state 19
    parameter_type  go to state 20


State 15

    9 main_function: function_type tMAIN $@2 tLPAR • parameter_list tRPAR tLBRACE body tRBRACE

    tINT   shift, and go to state 16
    tVOID  shift, and go to state 17

    $default  reduce using rule 12 (parameter_list)

    parameter_list  go to state 21
    parameter       go to state 19
    parameter_type  go to state 20


State 16

   18 parameter_type: tINT •

    $default  reduce using rule 18 (parameter_type)


State 17

   13 parameter_list: tVOID •

    $default  reduce using rule 13 (parameter_list)


State 18

    7 function: function_type tID tLPAR parameter_list • tRPAR tLBRACE $@1 body tRBRACE
   15 parameter_list: parameter_list • tCOMMA parameter

    tRPAR   shift, and go to state 22
    tCOMMA  shift, and go to state 23


State 19

   14 parameter_list: parameter •

    $default  reduce using rule 14 (parameter_list)


State 20

   16 parameter: parameter_type • tID
   17          | parameter_type • tID tASSIGN equality_expression

    tID  shift, and go to state 24


State 21

    9 main_function: function_type tMAIN $@2 tLPAR parameter_list • tRPAR tLBRACE body tRBRACE
   15 parameter_list: parameter_list • tCOMMA parameter

    tRPAR   shift, and go to state 25
    tCOMMA  shift, and go to state 23


State 22

    7 function: function_type tID tLPAR parameter_list tRPAR • tLBRACE $@1 body tRBRACE

    tLBRACE  shift, and go to state 26


State 23

   15 parameter_list: parameter_list tCOMMA • parameter

    tINT  shift, and go to state 16

    parameter       go to state 27
    parameter_type  go to state 20


State 24

   16 parameter: parameter_type tID •
   17          | parameter_type tID • tASSIGN equality_expression

    tASSIGN  shift, and go to state 28

    $default  reduce using rule 16 (parameter)


State 25

    9 main_function: function_type tMAIN $@2 tLPAR parameter_list tRPAR • tLBRACE body tRBRACE

    tLBRACE  shift, and go to state 29


State 26

    7 function: function_type tID tLPAR parameter_list tRPAR tLBRACE • $@1 body tRBRACE

    $default  reduce using rule 6 ($@1)

    $@1  go to state 30


State 27

   15 parameter_list: parameter_list tCOMMA parameter •

    $default  reduce using rule 15 (parameter_list)


State 28

   17 parameter: parameter_type tID tASSIGN • equality_expression

    tNB  shift, and go to state 31
    tID  shift, and go to state 32

    functionCall         go to state 33
    equality_expression  go to state 34
    compare              go to state 35
    add_sub              go to state 36
    div_mul              go to state 37
    single_value         go to state 38


State 29

    9 main_function: function_type tMAIN $@2 tLPAR parameter_list tRPAR tLBRACE • body tRBRACE

    tIF      shift, and go to state 39
    tWHILE   shift, and go to state 40
    tPRINT   shift, and go to state 41
    tRETURN  shift, and go to state 42
    tINT     shift, and go to state 43
    tID      shift, and go to state 44

    $default  reduce using rule 25 (body)

    body              go to state 45
    return            go to state 46
    instruction_list  go to state 47
    declaration_list  go to state 48
    declaration       go to state 49
    declaration_type  go to state 50
    instruction       go to state 51
    assignment_list   go to state 52
    ifblock           go to state 53
    whileblock        go to state 54
    printblock        go to state 55


State 30

    7 function: function_type tID tLPAR parameter_list tRPAR tLBRACE $@1 • body tRBRACE

    tIF      shift, and go to state 39
    tWHILE   shift, and go to state 40
    tPRINT   shift, and go to state 41
    tRETURN  shift, and go to state 42
    tINT     shift, and go to state 43
    tID      shift, and go to state 44

    $default  reduce using rule 25 (body)

    body              go to state 56
    return            go to state 46
    instruction_list  go to state 47
    declaration_list  go to state 48
    declaration       go to state 49
    declaration_type  go to state 50
    instruction       go to state 51
    assignment_list   go to state 52
    ifblock           go to state 53
    whileblock        go to state 54
    printblock        go to state 55


State 31

   81 single_value: tNB •

    $default  reduce using rule 81 (single_value)


State 32

   19 functionCall: tID • tLPAR action-call1 argument_list tRPAR
   80 single_value: tID •

    tLPAR  shift, and go to state 57

    $default  reduce using rule 80 (single_value)


State 33

   73 add_sub: functionCall •

    $default  reduce using rule 73 (add_sub)


State 34

   17 parameter: parameter_type tID tASSIGN equality_expression •
   66 equality_expression: equality_expression • tEQ compare
   67                    | equality_expression • tNE compare

    tNE  shift, and go to state 58
    tEQ  shift, and go to state 59

    $default  reduce using rule 17 (parameter)


State 35

   65 equality_expression: compare •
   69 compare: compare • tLT add_sub
   70        | compare • tGT add_sub
   71        | compare • tLE add_sub
   72        | compare • tGE add_sub

    tLT  shift, and go to state 60
    tGT  shift, and go to state 61
    tGE  shift, and go to state 62
    tLE  shift, and go to state 63

    $default  reduce using rule 65 (equality_expression)


State 36

   68 compare: add_sub •
   75 add_sub: add_sub • tADD div_mul
   76        | add_sub • tSUB div_mul

    tADD  shift, and go to state 64
    tSUB  shift, and go to state 65

    $default  reduce using rule 68 (compare)


State 37

   74 add_sub: div_mul •
   78 div_mul: div_mul • tMUL single_value
   79        | div_mul • tDIV single_value

    tMUL  shift, and go to state 66
    tDIV  shift, and go to state 67

    $default  reduce using rule 74 (add_sub)


State 38

   77 div_mul: single_value •

    $default  reduce using rule 77 (div_mul)


State 39

   48 ifblock: tIF • tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex $@3
   50        | tIF • tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex $@4
   52        | tIF • tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE ifblock $@5

    tLPAR  shift, and go to state 68


State 40

   57 whileblock: tWHILE • tLPAR condition tRPAR action-while tLBRACE body tRBRACE $@6

    tLPAR  shift, and go to state 69


State 41

   59 printblock: tPRINT • tLPAR single_value tRPAR tSEMI

    tLPAR  shift, and go to state 70


State 42

   30 return: tRETURN • add_sub tSEMI

    tNB  shift, and go to state 31
    tID  shift, and go to state 32

    functionCall  go to state 33
    add_sub       go to state 71
    div_mul       go to state 37
    single_value  go to state 38


State 43

   36 declaration_type: tINT •

    $default  reduce using rule 36 (declaration_type)


State 44

   45 assignment_list: tID • tASSIGN add_sub tSEMI
   46                | tID • tASSIGN add_sub tCOMMA assignment_list

    tASSIGN  shift, and go to state 72


State 45

    9 main_function: function_type tMAIN $@2 tLPAR parameter_list tRPAR tLBRACE body • tRBRACE

    tRBRACE  shift, and go to state 73


State 46

   29 body: return •

    $default  reduce using rule 29 (body)


State 47

   27 body: instruction_list •
   32 instruction_list: instruction_list • instruction

    tIF     shift, and go to state 39
    tWHILE  shift, and go to state 40
    tPRINT  shift, and go to state 41
    tID     shift, and go to state 44

    $default  reduce using rule 27 (body)

    instruction      go to state 74
    assignment_list  go to state 52
    ifblock          go to state 53
    whileblock       go to state 54
    printblock       go to state 55


State 48

   26 body: declaration_list •
   28     | declaration_list • instruction_list
   34 declaration_list: declaration_list • declaration

    tIF     shift, and go to state 39
    tWHILE  shift, and go to state 40
    tPRINT  shift, and go to state 41
    tINT    shift, and go to state 43
    tID     shift, and go to state 44

    $default  reduce using rule 26 (body)

    instruction_list  go to state 75
    declaration       go to state 76
    declaration_type  go to state 50
    instruction       go to state 51
    assignment_list   go to state 52
    ifblock           go to state 53
    whileblock        go to state 54
    printblock        go to state 55


State 49

   33 declaration_list: declaration •

    $default  reduce using rule 33 (declaration_list)


State 50

   35 declaration: declaration_type • identifiers_list tSEMI

    tID  shift, and go to state 77

    identifiers_list  go to state 78


State 51

   31 instruction_list: instruction •

    $default  reduce using rule 31 (instruction_list)


State 52

   41 instruction: assignment_list •

    $default  reduce using rule 41 (instruction)


State 53

   42 instruction: ifblock •

    $default  reduce using rule 42 (instruction)


State 54

   43 instruction: whileblock •

    $default  reduce using rule 43 (instruction)


State 55

   44 instruction: printblock •

    $default  reduce using rule 44 (instruction)


State 56

    7 function: function_type tID tLPAR parameter_list tRPAR tLBRACE $@1 body • tRBRACE

    tRBRACE  shift, and go to state 79


State 57

   19 functionCall: tID tLPAR • action-call1 argument_list tRPAR

    $default  reduce using rule 20 (action-call1)

    action-call1  go to state 80


State 58

   67 equality_expression: equality_expression tNE • compare

    tNB  shift, and go to state 31
    tID  shift, and go to state 32

    functionCall  go to state 33
    compare       go to state 81
    add_sub       go to state 36
    div_mul       go to state 37
    single_value  go to state 38


State 59

   66 equality_expression: equality_expression tEQ • compare

    tNB  shift, and go to state 31
    tID  shift, and go to state 32

    functionCall  go to state 33
    compare       go to state 82
    add_sub       go to state 36
    div_mul       go to state 37
    single_value  go to state 38


State 60

   69 compare: compare tLT • add_sub

    tNB  shift, and go to state 31
    tID  shift, and go to state 32

    functionCall  go to state 33
    add_sub       go to state 83
    div_mul       go to state 37
    single_value  go to state 38


State 61

   70 compare: compare tGT • add_sub

    tNB  shift, and go to state 31
    tID  shift, and go to state 32

    functionCall  go to state 33
    add_sub       go to state 84
    div_mul       go to state 37
    single_value  go to state 38


State 62

   72 compare: compare tGE • add_sub

    tNB  shift, and go to state 31
    tID  shift, and go to state 32

    functionCall  go to state 33
    add_sub       go to state 85
    div_mul       go to state 37
    single_value  go to state 38


State 63

   71 compare: compare tLE • add_sub

    tNB  shift, and go to state 31
    tID  shift, and go to state 32

    functionCall  go to state 33
    add_sub       go to state 86
    div_mul       go to state 37
    single_value  go to state 38


State 64

   75 add_sub: add_sub tADD • div_mul

    tNB  shift, and go to state 31
    tID  shift, and go to state 87

    div_mul       go to state 88
    single_value  go to state 38


State 65

   76 add_sub: add_sub tSUB • div_mul

    tNB  shift, and go to state 31
    tID  shift, and go to state 87

    div_mul       go to state 89
    single_value  go to state 38


State 66

   78 div_mul: div_mul tMUL • single_value

    tNB  shift, and go to state 31
    tID  shift, and go to state 87

    single_value  go to state 90


State 67

   79 div_mul: div_mul tDIV • single_value

    tNB  shift, and go to state 31
    tID  shift, and go to state 87

    single_value  go to state 91


State 68

   48 ifblock: tIF tLPAR • condition tRPAR action-if tLBRACE body tRBRACE action-getIndex $@3
   50        | tIF tLPAR • condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex $@4
   52        | tIF tLPAR • condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE ifblock $@5

    tNOT  shift, and go to state 92
    tNB   shift, and go to state 31
    tID   shift, and go to state 93

    functionCall         go to state 33
    condition            go to state 94
    equality_expression  go to state 95
    compare              go to state 35
    add_sub              go to state 36
    div_mul              go to state 37
    single_value         go to state 38


State 69

   57 whileblock: tWHILE tLPAR • condition tRPAR action-while tLBRACE body tRBRACE $@6

    tNOT  shift, and go to state 92
    tNB   shift, and go to state 31
    tID   shift, and go to state 93

    functionCall         go to state 33
    condition            go to state 96
    equality_expression  go to state 95
    compare              go to state 35
    add_sub              go to state 36
    div_mul              go to state 37
    single_value         go to state 38


State 70

   59 printblock: tPRINT tLPAR • single_value tRPAR tSEMI

    tNB  shift, and go to state 31
    tID  shift, and go to state 87

    single_value  go to state 97


State 71

   30 return: tRETURN add_sub • tSEMI
   75 add_sub: add_sub • tADD div_mul
   76        | add_sub • tSUB div_mul

    tADD   shift, and go to state 64
    tSUB   shift, and go to state 65
    tSEMI  shift, and go to state 98


State 72

   45 assignment_list: tID tASSIGN • add_sub tSEMI
   46                | tID tASSIGN • add_sub tCOMMA assignment_list

    tNB  shift, and go to state 31
    tID  shift, and go to state 32

    functionCall  go to state 33
    add_sub       go to state 99
    div_mul       go to state 37
    single_value  go to state 38


State 73

    9 main_function: function_type tMAIN $@2 tLPAR parameter_list tRPAR tLBRACE body tRBRACE •

    $default  reduce using rule 9 (main_function)


State 74

   32 instruction_list: instruction_list instruction •

    $default  reduce using rule 32 (instruction_list)


State 75

   28 body: declaration_list instruction_list •
   32 instruction_list: instruction_list • instruction

    tIF     shift, and go to state 39
    tWHILE  shift, and go to state 40
    tPRINT  shift, and go to state 41
    tID     shift, and go to state 44

    $default  reduce using rule 28 (body)

    instruction      go to state 74
    assignment_list  go to state 52
    ifblock          go to state 53
    whileblock       go to state 54
    printblock       go to state 55


State 76

   34 declaration_list: declaration_list declaration •

    $default  reduce using rule 34 (declaration_list)


State 77

   37 identifiers_list: tID •
   38                 | tID • tASSIGN add_sub

    tASSIGN  shift, and go to state 100

    $default  reduce using rule 37 (identifiers_list)


State 78

   35 declaration: declaration_type identifiers_list • tSEMI
   39 identifiers_list: identifiers_list • tCOMMA tID
   40                 | identifiers_list • tCOMMA tID tASSIGN add_sub

    tSEMI   shift, and go to state 101
    tCOMMA  shift, and go to state 102


State 79

    7 function: function_type tID tLPAR parameter_list tRPAR tLBRACE $@1 body tRBRACE •

    $default  reduce using rule 7 (function)


State 80

   19 functionCall: tID tLPAR action-call1 • argument_list tRPAR

    tNB  shift, and go to state 31
    tID  shift, and go to state 32

    tNB       [reduce using rule 21 (argument_list)]
    tID       [reduce using rule 21 (argument_list)]
    $default  reduce using rule 21 (argument_list)

    functionCall   go to state 33
    argument_list  go to state 103
    argument       go to state 104
    add_sub        go to state 105
    div_mul        go to state 37
    single_value   go to state 38


State 81

   67 equality_expression: equality_expression tNE compare •
   69 compare: compare • tLT add_sub
   70        | compare • tGT add_sub
   71        | compare • tLE add_sub
   72        | compare • tGE add_sub

    tLT  shift, and go to state 60
    tGT  shift, and go to state 61
    tGE  shift, and go to state 62
    tLE  shift, and go to state 63

    $default  reduce using rule 67 (equality_expression)


State 82

   66 equality_expression: equality_expression tEQ compare •
   69 compare: compare • tLT add_sub
   70        | compare • tGT add_sub
   71        | compare • tLE add_sub
   72        | compare • tGE add_sub

    tLT  shift, and go to state 60
    tGT  shift, and go to state 61
    tGE  shift, and go to state 62
    tLE  shift, and go to state 63

    $default  reduce using rule 66 (equality_expression)


State 83

   69 compare: compare tLT add_sub •
   75 add_sub: add_sub • tADD div_mul
   76        | add_sub • tSUB div_mul

    tADD  shift, and go to state 64
    tSUB  shift, and go to state 65

    $default  reduce using rule 69 (compare)


State 84

   70 compare: compare tGT add_sub •
   75 add_sub: add_sub • tADD div_mul
   76        | add_sub • tSUB div_mul

    tADD  shift, and go to state 64
    tSUB  shift, and go to state 65

    $default  reduce using rule 70 (compare)


State 85

   72 compare: compare tGE add_sub •
   75 add_sub: add_sub • tADD div_mul
   76        | add_sub • tSUB div_mul

    tADD  shift, and go to state 64
    tSUB  shift, and go to state 65

    $default  reduce using rule 72 (compare)


State 86

   71 compare: compare tLE add_sub •
   75 add_sub: add_sub • tADD div_mul
   76        | add_sub • tSUB div_mul

    tADD  shift, and go to state 64
    tSUB  shift, and go to state 65

    $default  reduce using rule 71 (compare)


State 87

   80 single_value: tID •

    $default  reduce using rule 80 (single_value)


State 88

   75 add_sub: add_sub tADD div_mul •
   78 div_mul: div_mul • tMUL single_value
   79        | div_mul • tDIV single_value

    tMUL  shift, and go to state 66
    tDIV  shift, and go to state 67

    $default  reduce using rule 75 (add_sub)


State 89

   76 add_sub: add_sub tSUB div_mul •
   78 div_mul: div_mul • tMUL single_value
   79        | div_mul • tDIV single_value

    tMUL  shift, and go to state 66
    tDIV  shift, and go to state 67

    $default  reduce using rule 76 (add_sub)


State 90

   78 div_mul: div_mul tMUL single_value •

    $default  reduce using rule 78 (div_mul)


State 91

   79 div_mul: div_mul tDIV single_value •

    $default  reduce using rule 79 (div_mul)


State 92

   64 condition: tNOT • condition

    tNOT  shift, and go to state 92
    tNB   shift, and go to state 31
    tID   shift, and go to state 93

    functionCall         go to state 33
    condition            go to state 106
    equality_expression  go to state 95
    compare              go to state 35
    add_sub              go to state 36
    div_mul              go to state 37
    single_value         go to state 38


State 93

   19 functionCall: tID • tLPAR action-call1 argument_list tRPAR
   60 condition: tID •
   80 single_value: tID •

    tLPAR  shift, and go to state 57

    tAND      reduce using rule 60 (condition)
    tAND      [reduce using rule 80 (single_value)]
    tOR       reduce using rule 60 (condition)
    tOR       [reduce using rule 80 (single_value)]
    tRPAR     reduce using rule 60 (condition)
    tRPAR     [reduce using rule 80 (single_value)]
    $default  reduce using rule 80 (single_value)


State 94

   48 ifblock: tIF tLPAR condition • tRPAR action-if tLBRACE body tRBRACE action-getIndex $@3
   50        | tIF tLPAR condition • tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex $@4
   52        | tIF tLPAR condition • tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE ifblock $@5
   62 condition: condition • tAND condition
   63          | condition • tOR condition

    tAND   shift, and go to state 107
    tOR    shift, and go to state 108
    tRPAR  shift, and go to state 109


State 95

   61 condition: equality_expression •
   66 equality_expression: equality_expression • tEQ compare
   67                    | equality_expression • tNE compare

    tNE  shift, and go to state 58
    tEQ  shift, and go to state 59

    $default  reduce using rule 61 (condition)


State 96

   57 whileblock: tWHILE tLPAR condition • tRPAR action-while tLBRACE body tRBRACE $@6
   62 condition: condition • tAND condition
   63          | condition • tOR condition

    tAND   shift, and go to state 107
    tOR    shift, and go to state 108
    tRPAR  shift, and go to state 110


State 97

   59 printblock: tPRINT tLPAR single_value • tRPAR tSEMI

    tRPAR  shift, and go to state 111


State 98

   30 return: tRETURN add_sub tSEMI •

    $default  reduce using rule 30 (return)


State 99

   45 assignment_list: tID tASSIGN add_sub • tSEMI
   46                | tID tASSIGN add_sub • tCOMMA assignment_list
   75 add_sub: add_sub • tADD div_mul
   76        | add_sub • tSUB div_mul

    tADD    shift, and go to state 64
    tSUB    shift, and go to state 65
    tSEMI   shift, and go to state 112
    tCOMMA  shift, and go to state 113


State 100

   38 identifiers_list: tID tASSIGN • add_sub

    tNB  shift, and go to state 31
    tID  shift, and go to state 32

    functionCall  go to state 33
    add_sub       go to state 114
    div_mul       go to state 37
    single_value  go to state 38


State 101

   35 declaration: declaration_type identifiers_list tSEMI •

    $default  reduce using rule 35 (declaration)


State 102

   39 identifiers_list: identifiers_list tCOMMA • tID
   40                 | identifiers_list tCOMMA • tID tASSIGN add_sub

    tID  shift, and go to state 115


State 103

   19 functionCall: tID tLPAR action-call1 argument_list • tRPAR
   23 argument_list: argument_list • argument

    tRPAR  shift, and go to state 116
    tNB    shift, and go to state 31
    tID    shift, and go to state 32

    functionCall  go to state 33
    argument      go to state 117
    add_sub       go to state 105
    div_mul       go to state 37
    single_value  go to state 38


State 104

   22 argument_list: argument •

    $default  reduce using rule 22 (argument_list)


State 105

   24 argument: add_sub •
   75 add_sub: add_sub • tADD div_mul
   76        | add_sub • tSUB div_mul

    tADD  shift, and go to state 64
    tSUB  shift, and go to state 65

    $default  reduce using rule 24 (argument)


State 106

   62 condition: condition • tAND condition
   63          | condition • tOR condition
   64          | tNOT condition •

    tAND  shift, and go to state 107
    tOR   shift, and go to state 108

    tAND      [reduce using rule 64 (condition)]
    tOR       [reduce using rule 64 (condition)]
    $default  reduce using rule 64 (condition)


State 107

   62 condition: condition tAND • condition

    tNOT  shift, and go to state 92
    tNB   shift, and go to state 31
    tID   shift, and go to state 93

    functionCall         go to state 33
    condition            go to state 118
    equality_expression  go to state 95
    compare              go to state 35
    add_sub              go to state 36
    div_mul              go to state 37
    single_value         go to state 38


State 108

   63 condition: condition tOR • condition

    tNOT  shift, and go to state 92
    tNB   shift, and go to state 31
    tID   shift, and go to state 93

    functionCall         go to state 33
    condition            go to state 119
    equality_expression  go to state 95
    compare              go to state 35
    add_sub              go to state 36
    div_mul              go to state 37
    single_value         go to state 38


State 109

   48 ifblock: tIF tLPAR condition tRPAR • action-if tLBRACE body tRBRACE action-getIndex $@3
   50        | tIF tLPAR condition tRPAR • action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex $@4
   52        | tIF tLPAR condition tRPAR • action-if tLBRACE body tRBRACE action-getIndex tELSE ifblock $@5

    $default  reduce using rule 53 (action-if)

    action-if  go to state 120


State 110

   57 whileblock: tWHILE tLPAR condition tRPAR • action-while tLBRACE body tRBRACE $@6

    $default  reduce using rule 58 (action-while)

    action-while  go to state 121


State 111

   59 printblock: tPRINT tLPAR single_value tRPAR • tSEMI

    tSEMI  shift, and go to state 122


State 112

   45 assignment_list: tID tASSIGN add_sub tSEMI •

    $default  reduce using rule 45 (assignment_list)


State 113

   46 assignment_list: tID tASSIGN add_sub tCOMMA • assignment_list

    tID  shift, and go to state 44

    assignment_list  go to state 123


State 114

   38 identifiers_list: tID tASSIGN add_sub •
   75 add_sub: add_sub • tADD div_mul
   76        | add_sub • tSUB div_mul

    tADD  shift, and go to state 64
    tSUB  shift, and go to state 65

    $default  reduce using rule 38 (identifiers_list)


State 115

   39 identifiers_list: identifiers_list tCOMMA tID •
   40                 | identifiers_list tCOMMA tID • tASSIGN add_sub

    tASSIGN  shift, and go to state 124

    $default  reduce using rule 39 (identifiers_list)


State 116

   19 functionCall: tID tLPAR action-call1 argument_list tRPAR •

    $default  reduce using rule 19 (functionCall)


State 117

   23 argument_list: argument_list argument •

    $default  reduce using rule 23 (argument_list)


State 118

   62 condition: condition • tAND condition
   62          | condition tAND condition •
   63          | condition • tOR condition

    $default  reduce using rule 62 (condition)


State 119

   62 condition: condition • tAND condition
   63          | condition • tOR condition
   63          | condition tOR condition •

    tAND  shift, and go to state 107

    $default  reduce using rule 63 (condition)


State 120

   48 ifblock: tIF tLPAR condition tRPAR action-if • tLBRACE body tRBRACE action-getIndex $@3
   50        | tIF tLPAR condition tRPAR action-if • tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex $@4
   52        | tIF tLPAR condition tRPAR action-if • tLBRACE body tRBRACE action-getIndex tELSE ifblock $@5

    tLBRACE  shift, and go to state 125


State 121

   57 whileblock: tWHILE tLPAR condition tRPAR action-while • tLBRACE body tRBRACE $@6

    tLBRACE  shift, and go to state 126


State 122

   59 printblock: tPRINT tLPAR single_value tRPAR tSEMI •

    $default  reduce using rule 59 (printblock)


State 123

   46 assignment_list: tID tASSIGN add_sub tCOMMA assignment_list •

    $default  reduce using rule 46 (assignment_list)


State 124

   40 identifiers_list: identifiers_list tCOMMA tID tASSIGN • add_sub

    tNB  shift, and go to state 31
    tID  shift, and go to state 32

    functionCall  go to state 33
    add_sub       go to state 127
    div_mul       go to state 37
    single_value  go to state 38


State 125

   48 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE • body tRBRACE action-getIndex $@3
   50        | tIF tLPAR condition tRPAR action-if tLBRACE • body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex $@4
   52        | tIF tLPAR condition tRPAR action-if tLBRACE • body tRBRACE action-getIndex tELSE ifblock $@5

    tIF      shift, and go to state 39
    tWHILE   shift, and go to state 40
    tPRINT   shift, and go to state 41
    tRETURN  shift, and go to state 42
    tINT     shift, and go to state 43
    tID      shift, and go to state 44

    $default  reduce using rule 25 (body)

    body              go to state 128
    return            go to state 46
    instruction_list  go to state 47
    declaration_list  go to state 48
    declaration       go to state 49
    declaration_type  go to state 50
    instruction       go to state 51
    assignment_list   go to state 52
    ifblock           go to state 53
    whileblock        go to state 54
    printblock        go to state 55


State 126

   57 whileblock: tWHILE tLPAR condition tRPAR action-while tLBRACE • body tRBRACE $@6

    tIF      shift, and go to state 39
    tWHILE   shift, and go to state 40
    tPRINT   shift, and go to state 41
    tRETURN  shift, and go to state 42
    tINT     shift, and go to state 43
    tID      shift, and go to state 44

    $default  reduce using rule 25 (body)

    body              go to state 129
    return            go to state 46
    instruction_list  go to state 47
    declaration_list  go to state 48
    declaration       go to state 49
    declaration_type  go to state 50
    instruction       go to state 51
    assignment_list   go to state 52
    ifblock           go to state 53
    whileblock        go to state 54
    printblock        go to state 55


State 127

   40 identifiers_list: identifiers_list tCOMMA tID tASSIGN add_sub •
   75 add_sub: add_sub • tADD div_mul
   76        | add_sub • tSUB div_mul

    tADD  shift, and go to state 64
    tSUB  shift, and go to state 65

    $default  reduce using rule 40 (identifiers_list)


State 128

   48 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body • tRBRACE action-getIndex $@3
   50        | tIF tLPAR condition tRPAR action-if tLBRACE body • tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex $@4
   52        | tIF tLPAR condition tRPAR action-if tLBRACE body • tRBRACE action-getIndex tELSE ifblock $@5

    tRBRACE  shift, and go to state 130


State 129

   57 whileblock: tWHILE tLPAR condition tRPAR action-while tLBRACE body • tRBRACE $@6

    tRBRACE  shift, and go to state 131


State 130

   48 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE • action-getIndex $@3
   50        | tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE • action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex $@4
   52        | tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE • action-getIndex tELSE ifblock $@5

    $default  reduce using rule 55 (action-getIndex)

    action-getIndex  go to state 132


State 131

   57 whileblock: tWHILE tLPAR condition tRPAR action-while tLBRACE body tRBRACE • $@6

    $default  reduce using rule 56 ($@6)

    $@6  go to state 133


State 132

   48 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex • $@3
   50        | tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex • tELSE action-else tLBRACE body tRBRACE action-getIndex $@4
   52        | tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex • tELSE ifblock $@5

    tELSE  shift, and go to state 134

    $default  reduce using rule 47 ($@3)

    $@3  go to state 135


State 133

   57 whileblock: tWHILE tLPAR condition tRPAR action-while tLBRACE body tRBRACE $@6 •

    $default  reduce using rule 57 (whileblock)


State 134

   50 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE • action-else tLBRACE body tRBRACE action-getIndex $@4
   52        | tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE • ifblock $@5

    tIF  shift, and go to state 39

    $default  reduce using rule 54 (action-else)

    ifblock      go to state 136
    action-else  go to state 137


State 135

   48 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex $@3 •

    $default  reduce using rule 48 (ifblock)


State 136

   52 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE ifblock • $@5

    $default  reduce using rule 51 ($@5)

    $@5  go to state 138


State 137

   50 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else • tLBRACE body tRBRACE action-getIndex $@4

    tLBRACE  shift, and go to state 139


State 138

   52 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE ifblock $@5 •

    $default  reduce using rule 52 (ifblock)


State 139

   50 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE • body tRBRACE action-getIndex $@4

    tIF      shift, and go to state 39
    tWHILE   shift, and go to state 40
    tPRINT   shift, and go to state 41
    tRETURN  shift, and go to state 42
    tINT     shift, and go to state 43
    tID      shift, and go to state 44

    $default  reduce using rule 25 (body)

    body              go to state 140
    return            go to state 46
    instruction_list  go to state 47
    declaration_list  go to state 48
    declaration       go to state 49
    declaration_type  go to state 50
    instruction       go to state 51
    assignment_list   go to state 52
    ifblock           go to state 53
    whileblock        go to state 54
    printblock        go to state 55


State 140

   50 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body • tRBRACE action-getIndex $@4

    tRBRACE  shift, and go to state 141


State 141

   50 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE • action-getIndex $@4

    $default  reduce using rule 55 (action-getIndex)

    action-getIndex  go to state 142


State 142

   50 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex • $@4

    $default  reduce using rule 49 ($@4)

    $@4  go to state 143


State 143

   50 ifblock: tIF tLPAR condition tRPAR action-if tLBRACE body tRBRACE action-getIndex tELSE action-else tLBRACE body tRBRACE action-getIndex $@4 •

    $default  reduce using rule 50 (ifblock)
